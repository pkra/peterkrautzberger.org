<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Peter Krautzberger</title>
	<subtitle> Â· on the web</subtitle>
	<link href="https://www.peterkrautzberger.org/atom.xml" rel="self"/>
	<link href="https://www.peterkrautzberger.org/"/>
	<updated>2022-09-17T00:00:00Z</updated>
	<id>https://www.peterkrautzberger.org/</id>
	<author>
		<name>Peter Krautzberger</name>
		<email>p.krautzberger@gmail.com</email>
	</author>
	
	<entry>
		<title>Towards a general method for accessible content trees or: deep aria-labels for equations revisited</title>
		<link href="https://www.peterkrautzberger.org/0209/"/>
		<updated>2019-01-13T00:00:00Z</updated>
		<id>https://www.peterkrautzberger.org/0209/</id>
		<content type="html">&lt;p&gt;Oh dear, that title is a mouth full. A while ago I wrote about &lt;a href=&quot;https://www.peterkrautzberger.org/0208/&quot;&gt;two interesting results from the AIM workshop&lt;/a&gt; and I had promised to dive deeper. Well, take a deep breath.&lt;/p&gt;
&lt;h2&gt;A simple example&lt;/h2&gt;
&lt;p&gt;Here&#39;s a story. I think it was at the first web standard related event that I ever attended, the &lt;a href=&quot;https://www.w3.org/2012/08/electronic-books/&quot;&gt;W3C workshop on ebooks&lt;/a&gt; back in 2012. Someone (maybe Janina?) presented an example of an accessible SVG and I was blown away. My memory, flawed as it is, says it was the &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Ghostscript_Tiger.svg&quot;&gt;classic SVG tiger&lt;/a&gt; but it was set up in a way that demonstrated amazing exploration features, providing non-visual representations that could dive into the entirety of the graphic, starting with high-level descriptions (something like &lt;em&gt;a tiger&#39;s head&lt;/em&gt;) all the way down to detailed nuances (&lt;em&gt;left whisker, 3 of 12&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;I&#39;m prone ot get the specifics wrong so here&#39;s a different example:&lt;/p&gt;
&lt;figure&gt;
&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:House.svg#/media/File:House.svg&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/2/24/House.svg&quot; alt=&quot;clip art house&quot; width=&quot;389&quot; height=&quot;391&quot; /&gt;&lt;/a&gt;
&lt;figcaption&gt;
By &lt;a rel=&quot;nofollow&quot; class=&quot;external text&quot; href=&quot;http://openclipart.org/media/people/barretr&quot;&gt;barretr&lt;/a&gt; (Open Clip Art Library) - &lt;a rel=&quot;nofollow&quot; class=&quot;external free&quot; href=&quot;http://openclipart.org/media/files/barretr/2941&quot;&gt;http://openclipart.org/media/files/barretr/2941&lt;/a&gt;, &lt;a href=&quot;http://creativecommons.org/publicdomain/zero/1.0/deed.en&quot; title=&quot;Creative Commons Zero, Public Domain Dedication&quot;&gt;CC0&lt;/a&gt;, &lt;a href=&quot;https://commons.wikimedia.org/w/index.php?curid=3454675&quot;&gt;Link&lt;/a&gt;&lt;p&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So this is a house. How would you describe it? Maybe: &lt;em&gt;A house with a red chimney and a blue door&lt;/em&gt;? That&#39;s not bad but there&#39;s more so much more to be said about this house!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&#39;s a drawing of the front of a house (no other part is visible)&lt;/li&gt;
&lt;li&gt;it has a dark gray, mono-pitched roof with a red chimney on the left&lt;/li&gt;
&lt;li&gt;it has a blue door with a round, dark-gray doorknob on the left&lt;/li&gt;
&lt;li&gt;it has a yellow front wall&lt;/li&gt;
&lt;li&gt;the chimney aligns with the wall&lt;/li&gt;
&lt;li&gt;some parts are drawn with gradient effects&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These descriptions could of course all be put into one very long textual representation, e.g., as a &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; or an &lt;code&gt;aria-labeledby&lt;/code&gt; construction. And that would be ok. But I find it rather limited.&lt;/p&gt;
&lt;p&gt;This is not how a human would describe things. Imagine I&#39;d ask you to describe it. You would not start with the gradient of the doorknob on the first go. I bet you are much more inclined to provide some information at first and get into more detail if whoever is asking wants to dive deeper.&lt;/p&gt;
&lt;p&gt;Sometimes, we are in the position to have more information like this on the web, too.&lt;/p&gt;
&lt;p&gt;Imagine, this house was created in an authoring environment that specializes on such drawings; it may have been drag&amp;amp;dropped using pre-fabricated components, each having detailed descriptions, integrating user changes such as shape or color modifications, and being able to generate composited descriptions, perhaps combining them using simple rule sets (maybe even author customizable rule sets).&lt;/p&gt;
&lt;p&gt;The other thing you may notice is that the house is more than the sum of its parts, i.e., a description for the house (and parts thereof) may not sufficiently be represented by stringing the descriptions of the leafs together; for example, where would the &lt;em&gt;with&lt;/em&gt; in &lt;em&gt;a roof with a chimney&lt;/em&gt; come from? For that matter, where would &lt;em&gt;house&lt;/em&gt; come from? Depending on the content and context, there may be additional connecting words or phrases, there may be details to drop or reveal. Maybe the fabric of the roof or the whether the door is locked can be deduced from visual styling given other context.&lt;/p&gt;
&lt;p&gt;If you are lucky and you have more information, then you may find yourself in a situation where you want to add differing textual representations on every level of the tree, just like you would in a real conversation, and you may want a way for users to have access to all those varying levels of representation - but not all at once as that could be overwhelming.&lt;/p&gt;
&lt;p&gt;The most important point: like all good web standards topics, this is about a general, low-level problem. (Although solving a more general problem might appeal to mathematicians, too.)&lt;/p&gt;
&lt;h2&gt;Deep aria labels on tree structures (or: it&#39;s not &lt;em&gt;just&lt;/em&gt; about equations)&lt;/h2&gt;
&lt;p&gt;So let&#39;s try to outline what this is about. Imagine you have&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a complex DOM structure (e.g., an inline SVG, a complex grid structure, an equation layout thingie)&lt;/li&gt;
&lt;li&gt;which is not represented well by its leafs alone (e.g., there might be abstract components, abbreviated content, inferred meaning)&lt;/li&gt;
&lt;li&gt;that might have a semantic tree structure that does not match the DOM tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now imagine that you have&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;appropriate textual representations for each node (e.g., aria-labels on all nodes)&lt;/li&gt;
&lt;li&gt;yet those textual representations may have notable differences between non-leafs and their descendants, i.e., a node may be more than the sum of its descendants (or less or both/neither).&lt;/li&gt;
&lt;li&gt;and you have proper aria-owns attributes all over the tree to represent the correct semantics&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What to want&lt;/h3&gt;
&lt;p&gt;Let&#39;s start with some fairly standard observations on accessible rendering:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unified rendering&lt;/strong&gt; visual and non-visual rendering should not be apart. Textual representation should be intentional, reflect the intention of the author. (This does not contradict that both graphical and textual representation will likely be created with tools, even tools leveraging heuristics.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Progressive enhancement / graceful degradation&lt;/strong&gt; a solution should work in a way that allows to progressively enhance content. For example, a top-level textual description (e.g., using &lt;code&gt;aria-label&lt;/code&gt;) is a robust fallback. You may lose some convenience if that&#39;s all there is - and even some information - but it certainly isn&#39;t terrible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt; a solution must be performant, especially if you apply it to hundreds or thousands of content fragments.&lt;/p&gt;
&lt;p&gt;From an author&#39;s point of view, the key affordance is &lt;strong&gt;precision/control&lt;/strong&gt;. This is worth repeating: Accessibility inevitably starts with author control. If authors cannot create content in a way that they can trust to render reliably, i.e., with the precision they put into their content, then they will not care to do so.&lt;/p&gt;
&lt;p&gt;If there&#39;s no control, the platform is failing the authors. If it&#39;s failing the authors to create accessible content, then it&#39;s failing the user because they will not receive accessible content.&lt;/p&gt;
&lt;p&gt;This primarily means that content should be authorable in a way that does not require &lt;em&gt;any&lt;/em&gt; heuristics on the side of rendering (visually or non-visually). Imagine AT would have to guess how many items are in a list. Or AT would have to throw computer vision at each image to guess a description. That&#39;s ok for broken content but not acceptable for good content.&lt;/p&gt;
&lt;p&gt;There are other useful things of course - ease of authoring comes to mind. But without a solution with tangible benefits, building authoring tools or practices is never going to happen.&lt;/p&gt;
&lt;p&gt;From a screenreader user&#39;s point of view, there are more affordances that you probably don&#39;t want to ignore.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;support for reading/browse modes&lt;/li&gt;
&lt;li&gt;support for full exploration (in focus mode)&lt;/li&gt;
&lt;li&gt;seamlessly switch between exploration and reading/browse&lt;/li&gt;
&lt;li&gt;synchronization of all rendering streams
&lt;ul&gt;
&lt;li&gt;visual (highlighting), aural and tactile rendering&lt;/li&gt;
&lt;li&gt;enable customized Braille stream if specialized Braille formats exists&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many more considerations beyond this but this would be a good start.&lt;/p&gt;
&lt;h3&gt;Towards a solution: mathjax-sre-walker&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: this is not a complete solution to all of the above. But I feel like it&#39;s heading in the right direction.&lt;/p&gt;
&lt;p&gt;The codebase for this lighweight walker dubbed mathjax-sre-walker is on GitHub and for this first public summary we&#39;ve tagged &lt;a href=&quot;https://github.com/krautzource/mathjax-sre-walker/releases/tag/2.0.0&quot;&gt;v2.0.0&lt;/a&gt;. As I mentioned in &lt;a href=&quot;https://www.peterkrautzberger.org/0208&quot;&gt;208&lt;/a&gt;, this work with &lt;a href=&quot;https://www.peterkrautzberger.org/0209/www.progressiveaccess.com/&quot;&gt;Volker Sorge&lt;/a&gt; grew out of a demo that David Tseng, Volker Sorge and Davide Cervone built at the AIM workshop in San Jose last year. A simplified demo in a codepen is embedded below alongside a recording of a quick demonstration.&lt;/p&gt;
&lt;h3&gt;what users get&lt;/h3&gt;
&lt;p&gt;For the visual user, it will provide a means of visually exploring the underlying (and often hard to discern) tree structure by putting the tree in focus and using the arrow keys.&lt;/p&gt;
&lt;p&gt;For the non-visual user, it will additionally provide textual representations for each tree node, in sync with the visual representation. It doesn&#39;t but could (should we get separate &lt;a href=&quot;https://github.com/w3c/aria/issues/765&quot;&gt;Braille streams in ARIA&lt;/a&gt;) additionally provide a simultaneous rendering in specialized formats such as Nemeth or UEB, chemical Braille or others.&lt;/p&gt;
&lt;p&gt;For the screenreader user, it will provide the top-level tree node in browse mode. When the tree&#39;s top-level DOM node is voiced, the screenreader should put in focus, triggering visual highlighting; the screenreader should also indicate the tree role to imply further functionality is available.&lt;/p&gt;
&lt;p&gt;The user can switch to the screenreader&#39;s focus mode to use keyboard exploration with the arrow keys which is matched visually by the highlighting. When the user switches back to browse mode, they can continue naturally browsing to the next piece of content.&lt;/p&gt;
&lt;h3&gt;how users get it&lt;/h3&gt;
&lt;p&gt;The first, not too relevant part: the DOM tree has lots of information in &lt;code&gt;data-&lt;/code&gt; attributes and in a first step we enrich the content with a secondary structure. Getting such information is of course not easy (luckily we can already automate that for equations thanks to speech-rule-engine) and this step can be done server-side. Ultimately that&#39;s not the hardest part - domain experts can build such tools - we&#39;re using Volker&#39;s &lt;a href=&quot;https://github.com/zorkow/speech-rule-engine/&quot;&gt;speech-rule-engine&lt;/a&gt; for the equations (which is a marvel).&lt;/p&gt;
&lt;p&gt;Yet all the extra information won&#39;t help if we can&#39;t make use of it on the web platform.&lt;/p&gt;
&lt;p&gt;So how is this realized in the DOM tree? As a bunch of &lt;code&gt;aria-label&lt;/code&gt;s (to add textual representations) and &lt;code&gt;aria-owns&lt;/code&gt; to carve out the tree structure that might differ from the DOM tree; we also add a &lt;code&gt;role&lt;/code&gt; to most nodes. In particular, we immediately get a top-level &lt;code&gt;aria-label&lt;/code&gt; which serves as a fallback.&lt;/p&gt;
&lt;p&gt;Now what we&#39;re missing is some kind of AT functionality that would give us an &lt;code&gt;aria-owns&lt;/code&gt; tree walker. We have built-in table walkers in screen readers already so this does not seem like a massive stretch to imagine, especially given the evolution of the tree role so far. Sadly, we do not have general purpose tree walkers (yet).&lt;/p&gt;
&lt;p&gt;In the second part, we overcome this by adding such a walker in JS. This walker consists of a tree structure (the &lt;code&gt;aria-owns&lt;/code&gt; tree, generated from the embedded data for performance) and a keyboard listener. It is very close to the DOM&#39;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Treewalker&quot;&gt;treewalker API&lt;/a&gt; and &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView&quot;&gt;WCAG tree examples&lt;/a&gt;, except that we&#39;re working on the &lt;code&gt;aria-owns&lt;/code&gt; tree because that tree may have a different order/structure from the DOM. This walker is fairly minimal, probably ~100 lines of ES6 code if you strip it down to its minimum.&lt;/p&gt;
&lt;p&gt;Here&#39;s a demo of v2 or you can look at the &lt;a href=&quot;https://krautzource.github.io/mathjax-sre-walker/index.html&quot;&gt;one in the repository&lt;/a&gt;.&lt;/p&gt;
&lt;p data-height=&quot;896&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;EGOZxm&quot; data-default-tab=&quot;result&quot; data-user=&quot;pkra&quot; data-pen-title=&quot;mathjax-sre-walker v2 demo&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/pkra/pen/EGOZxm/&quot;&gt;mathjax-sre-walker v2 demo&lt;/a&gt; by Peter Krautzberger (&lt;a href=&quot;https://codepen.io/pkra&quot;&gt;@pkra&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h3&gt;role role role your boat, gently down the stream&lt;/h3&gt;
&lt;p&gt;A side note on the chosen &lt;code&gt;role&lt;/code&gt; attributes. The tree role and its related roles may appear a good fit but they have been developed for specific application-like interfaces. It might be that it&#39;s smarter to use something different here, I honestly don&#39;t know.&lt;/p&gt;
&lt;p&gt;Besides possibly being the right roles, they are also supported well across the accessibility tool chain, i.e., they happen to get the effects we&#39;d like to see.&lt;/p&gt;
&lt;p&gt;What are those effects?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a top-level &lt;code&gt;aria-label&lt;/code&gt; to provide a default textual representation, especially in browse mode&lt;/li&gt;
&lt;li&gt;deeply nested &lt;code&gt;aria-labels&lt;/code&gt; with the role &lt;code&gt;treeitem&lt;/code&gt; provide detailed textual representation of all relevant nodes in exploration in focus mode&lt;/li&gt;
&lt;li&gt;browse mode puts element in focus on-the-go which makes for good UX: just drop out of browse mode when you hear an equation to start exploring&lt;/li&gt;
&lt;li&gt;switching back to browse mode continues smoothly&lt;/li&gt;
&lt;li&gt;&lt;code&gt;active-descendant&lt;/code&gt; is used to move the the focus on the accessibility tree&lt;/li&gt;
&lt;li&gt;thereby exposing the nested labels instead of the top-level node&#39;s label&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other roles have too many negative side effects in practice. Perhaps they shouldn&#39;t but it&#39;s often too hard to dissect if a problem comes from the ARIA specs, browser implementations, OS APIs, or screenreaders.  For example, some approaches didn&#39;t work well on MathJax SVG output but worked well on the clip art house; this is probably due to &lt;code&gt;use&lt;/code&gt; elements.&lt;/p&gt;
&lt;p&gt;Some other roles we&#39;ve tested across screenreaders:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;img&lt;/code&gt; (nested) prevents exploration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application&lt;/code&gt; loses the top level label when using browse mode and it is difficult to get back to browse mode after exploration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group&lt;/code&gt; is similar to application (except easier to get back into browse mode) but works poorly with CSS rendering&lt;/li&gt;
&lt;li&gt;&lt;code&gt;button&lt;/code&gt; and &lt;code&gt;math&lt;/code&gt; mostly work the same as &lt;code&gt;tree&lt;/code&gt; (very wrong, but hey)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Maybe those issues are fixable or maybe just due to my lack of understanding of specs and implementations. Of course, the mythical &lt;code&gt;role=static&lt;/code&gt; (&lt;code&gt;text&lt;/code&gt; etc.) might be very appropriate but, alas, it doesn&#39;t exist.&lt;/p&gt;
&lt;p&gt;Personally, I don&#39;t care which role I use. Whatever role works, I&#39;m happy to use it. Tree seems both adequate and semantically fitting, and they have a history of steady improvement.&lt;/p&gt;
&lt;h2&gt;In real life&lt;/h2&gt;
&lt;p&gt;Below is a recording with NVDA and Chrome on Windows 10.&lt;/p&gt;
&lt;div style=&quot;display: flex&quot;&gt;
&lt;iframe width=&quot;720&quot; height=&quot;748&quot; src=&quot;https://www.youtube.com/embed/LWho3euldjM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; style=&quot;flex-grow: 1&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;h2&gt;Support&lt;/h2&gt;
&lt;p&gt;Overall, this works well on Firefox and Chrome while Edge and Safari generally don&#39;t get your more than the top-level label, i.e., the fallback; I haven&#39;t taken the time to compile for IE11 to test it.&lt;/p&gt;
&lt;p&gt;NVDA seems best so far, JAWS seems to have a problem tracking focus (it jumps away when getting back into browse mode / virtual cursor), and Orca &lt;s&gt;struggles with CSS rendering&lt;/s&gt; (see update below). VoiceOver with Safari is doing its thing (treating everything as a group) but VO works well with Chrome on MacOS. On iOS and Android we get the top-level labels (except VO with CSS rendering for some reason). The current code lacks touch input because (as far as I know) neither Talkback nor VoiceOver have a way to switch into (some form of) focus mode; it could be added, perhaps the visual exploration is interesting enough. I&#39;ll be publishing more demo runs as we move along.&lt;/p&gt;
&lt;p&gt;Overall, I&#39;m excited about the robustness at this stage and I plan to use this at work soon(ish). I also hope to bring the discussion around standardization of tree walkers to the ARIA Working Group - it seems to align with the evolution of tree widgets (e.g., for tab focus management, positional information) and a lot of content could benefit from some defaults in AT (much like with table walkers). But first we really need separate Braille streams.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;update 2019-01-24&lt;/strong&gt; Joanmarie Diggs was kind enough to look into the issues with CSS layout (commits &lt;a href=&quot;https://gitlab.gnome.org/GNOME/orca/commit/9357aa9cd82f43a853704b98464eb7a76352d4ed&quot;&gt;9357aa9c&lt;/a&gt; and &lt;a href=&quot;https://gitlab.gnome.org/GNOME/orca/commit/87d78dad097ce11a359e3bbebd77f5d32b2fccd6&quot;&gt;87d78dad&lt;/a&gt;) and Orca now matches NVDA beautifully.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Carnival of Math No. 173</title>
		<link href="https://www.peterkrautzberger.org/0210/"/>
		<updated>2019-09-12T00:00:00Z</updated>
		<id>https://www.peterkrautzberger.org/0210/</id>
		<content type="html">&lt;p&gt;This year I &lt;a href=&quot;https://www.peterkrautzberger.org/0194/&quot;&gt;once again&lt;/a&gt; have the pleasure to host the now &lt;strong&gt;173th Carnival of Mathematics&lt;/strong&gt;, the moveable feast of mathematical blogging shepherded by &lt;a href=&quot;http://aperiodical.com/carnival-of-mathematics/&quot;&gt;The Aperiodical&lt;/a&gt;, the best math blogging collective on this little blue ball in space. Be sure to &lt;a href=&quot;https://leeyieng.wordpress.com/2019/08/04/carnival-of-mathematics-172/&quot;&gt;visit the previous Carnival (No. 172) at Cassandra Lee Yieng&#39;s blog&lt;/a&gt; and keep an eye on &lt;a href=&quot;https://aperiodical.com/carnival-of-mathematics/&quot;&gt;all Carnivals&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As tradition will have it, we begin our show by taking a closer look at our number.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;173&lt;/strong&gt; is not just a prime, the sum of two squares of primes (2Â²+13Â²) &lt;em&gt;and&lt;/em&gt; the sum of three primes (53+59+61). No, it is also a &lt;a href=&quot;https://en.wikipedia.org/wiki/Balanced_prime&quot;&gt;balanced prime&lt;/a&gt; (same gap to previous and following prime) and the 13&lt;sup&gt;th&lt;/sup&gt;(!) &lt;a href=&quot;https://en.wikipedia.org/wiki/Sophie_Germain_prime&quot;&gt;Sopie Germain prime&lt;/a&gt; (since 2Ã173+1=347 is also prime).&lt;/p&gt;
&lt;figure&gt;
&lt;img width=&quot;256&quot; style=&quot;margin: 0 auto;&quot; alt=&quot;Sophie Germain&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/8/8b/Germain.jpeg&quot; /&gt;
&lt;figcaption&gt;Portrait of &lt;a href=&quot;https://en.wikipedia.org/wiki/Sophie_Germain&quot;&gt;Sophie Germain&lt;/a&gt; (April 1, 1776 - June 27, 1831), &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Germain.jpeg&quot;&gt;[Public domain], via Wikimedia Commons&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Alas, 173 is also an &lt;a href=&quot;https://en.wikipedia.org/wiki/Odious_number&quot;&gt;odious number&lt;/a&gt;, which may sound rather bad but just means it has an odd number of 1&#39;s in binary (10101101).&lt;/p&gt;
&lt;p&gt;Now that you&#39;ve warmed up, let us once again enter the decidely wonderful, balanced madness of the mathematical blogging carnival.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Likely most people (or at least the most people) will already have seen the NYT&#39;s Kenneth Chang looking into &lt;a href=&quot;https://www.nytimes.com/2019/08/06/science/math-equation-pemdas.html&quot;&gt;Why Mathematicians hate that viral equation&lt;/a&gt;; but really who needs 8Ã·2(2+2) when you can so easily have drama with the Oxford Comma.&lt;/p&gt;
&lt;p&gt;In any case, make sure you head over to Over at the Art of Research where Vi Hart shared &lt;a href=&quot;https://theartofresearch.org/computation-for-hands-systems-for-humans/&quot;&gt;Computation for Hands, Systems for Humans&lt;/a&gt;, taking you on the magic carpet ride that&#39;s Vi&#39;s hands &amp;quot;craving computation&amp;quot;, combining hardware, software, systems thinking, VR and a ton of other ideas.&lt;/p&gt;
&lt;p&gt;Before you continue to Ari Rubinsztejn explains &lt;a href=&quot;https://gereshes.com/2019/05/27/why-tracking-space-debris-is-so-hard/&quot;&gt;Why Tracking Space Debris is so Hard&lt;/a&gt; (thanks, nonlinear dynamics!), step under the cover of the Undercover economist Tim Harford who wrote on &lt;a href=&quot;http://timharford.com/2019/08/the-strange-power-of-the-idea-of-average/&quot;&gt;the strange power of the idea of average&lt;/a&gt;, both good and bad.&lt;/p&gt;
&lt;p&gt;Of course any mathematically topic is worth a deep dive into, so head into the magical depths of the Math Vault for an extensive article on &lt;a href=&quot;https://mathvault.ca/long-division/&quot;&gt;Long Division and Its Variants (for Integers)&lt;/a&gt; Once you&#39;re ready, jump out and get yourself back into Cantor&#39;s Paradise where JÃ¸rgen Veisdal will let you in on &lt;a href=&quot;https://medium.com/cantors-paradise/the-mathematics-of-elo-ratings-b6bfc9ca1dba&quot;&gt;the mathematics of Elo ratings&lt;/a&gt;, a glimpse at the history of the famous ranking system.&lt;/p&gt;
&lt;p&gt;Before you lose your king or queen, let Richard Elwes ask you a question befit Carol&#39;s Red Queen: &lt;a href=&quot;https://richardelwes.co.uk/2019/09/06/how-many-sides-does-a-circle-have/&quot;&gt;How Many Sides Does A Circle Have?&lt;/a&gt; and be sure to follow him off on a tanget or two. If all those tangents twirled you around too much, switch to a classical, sold blog post by the amazing John Cook who will help you &lt;a href=&quot;https://www.johndcook.com/blog/2019/08/27/heaps-law/&quot;&gt;estimate vocabulary size with Heapsâ law&lt;/a&gt; just in case you need to verify a post-humously discovered manuscript by Jane Austen.&lt;/p&gt;
&lt;p&gt;To ease your way out of those particular mazes, take a sip and mingle over at &lt;a href=&quot;https://ima.org.uk/12133/editorial-august-2019/&quot;&gt;this month&#39;s IMA editorial&lt;/a&gt;, if only to catch up on the Queenâs Birthday Honours List for 2019. And if you are one of those people who frequent the always dramatic birdsite, here are a two math-focused threads for you:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Oh no, I&amp;#39;ve deliberately obscured large portions of this ruler and I need to make sure these vegetables are whole numbers of inches long or my toddler will eat me instead: a &lt;a href=&quot;https://twitter.com/hashtag/RealWorldMaths?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#RealWorldMaths&lt;/a&gt; thread &lt;a href=&quot;https://t.co/GWuZMry6Ti&quot;&gt;pic.twitter.com/GWuZMry6Ti&lt;/a&gt;&lt;/p&gt;&amp;mdash; Christian Lawson-Perfect (@christianp) &lt;a href=&quot;https://twitter.com/christianp/status/1169651584416079872?ref_src=twsrc%5Etfw&quot;&gt;September 5, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Unpopular take: As someone with a Master&amp;#39;s degree in statistics and who teaches data science, I&amp;#39;m very much over the &amp;quot;data scientists are incompetent fools who just throw data in and get results from a computer with no critical thinking&amp;quot; takes. 1/&lt;/p&gt;&amp;mdash; Matt Brems (@matthewbrems) &lt;a href=&quot;https://twitter.com/matthewbrems/status/1163224585644511233?ref_src=twsrc%5Etfw&quot;&gt;August 18, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mathyawp/status/1162462128441139201?s=19&quot;&gt;Also via twitter&lt;/a&gt;, Francis Su shared his handout with &lt;a href=&quot;https://www.math.hmc.edu/~su/math131/good-math-writing.pdf&quot;&gt;Guildelines for good mathematical writing (PDF)&lt;/a&gt; which he says you should feel free to share with your students.&lt;/p&gt;
&lt;p&gt;To wrap things up, take a carousel of math blogging perfection at Math Off The Grid where Benjamin Leis&#39;s post on &lt;a href=&quot;https://blog.mathoffthegrid.com/2019/08/cardanos-method.html&quot;&gt;Cardano&#39;s Method&lt;/a&gt; starts from a new video from Mathologer (below), picks up &lt;a href=&quot;https://twitter.com/MrHonner/status/1165417359764533248?ref_src=twsrc%5Etfw&quot;&gt;a tweet by Patrick Honner&lt;/a&gt; throws in &lt;a href=&quot;https://artofproblemsolving.com/news/aftermath/aftermath-running-a-school-for-math-lovers-with-sam-vandervelde&quot;&gt;a podcast with Sam Vandervelde&lt;/a&gt; and tops it off with a pointer to &lt;a href=&quot;https://en.wikipedia.org/wiki/Marden%27s_theorem&quot;&gt;Marden&#39;s Theorem&lt;/a&gt; to drag you into the carnival that is Wikipedia&#39;s mathematics articles.&lt;/p&gt;
&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;&lt;div class=&quot;embed-container&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/QILiHiTD3uc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;Thatâs it for the beautiful month of September. Thanks to everyone who submitted a post! After almost 9 years of running&lt;/p&gt;
&lt;p&gt;Be sure to stop by next monthâs Carnival. You should &lt;a href=&quot;http://aperiodical.com/carnival-of-mathematics/&quot;&gt;submit your favorite blog posts/videos/content&lt;/a&gt; from the month of September. If youâd like to host an upcoming show, please get in touch with &lt;a href=&quot;mailto:katie@aperiodical.com&quot;&gt;Katie&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Weeknote 2019/37</title>
		<link href="https://www.peterkrautzberger.org/0211/"/>
		<updated>2019-09-14T00:00:00Z</updated>
		<id>https://www.peterkrautzberger.org/0211/</id>
		<content type="html">&lt;p&gt;I&#39;ve fallen silent this year. There were a lot of reasons for that. Mostly bad things, but many good things, too. I want to try to find a way back to writing, especially given this blog&#39;s 10&lt;sup&gt;th&lt;/sup&gt; anniversary coming up in December. I&#39;ve never been very personal on this personal site of mine; or perhaps more precisely I may not have appeared to be so, that is, I&#39;ve not been writing the stuff most people think of when they say &amp;quot;personal website&amp;quot;. I&#39;m thinking maybe I&#39;ll give it a try.&lt;/p&gt;
&lt;p&gt;Anyway. I really like this idea of a weeknote which I first saw at &lt;a href=&quot;https://daverupert.com/&quot;&gt;Dave Rupert&#39;s&lt;/a&gt; and then at &lt;a href=&quot;https://www.baldurbjarnason.com/&quot;&gt;Baldur Bjarnason&#39;s&lt;/a&gt;. Let&#39;s give it a try and see how it feels.&lt;/p&gt;
&lt;h2&gt;Work&lt;/h2&gt;
&lt;p&gt;Work has been mixed this week. A big chunk of in-depth work was finalizing (what feels like a countless number of) tests for a very old piece of code that never had any tests. As this code had grown into a little bit of a monster, I now feel much more in control of it and ready to rewrite/port it. I also got into the GitHub Actions beta this week which looks nice and should help automate a bunch of stuff that&#39;s being done by a much less natural GitHub app (client permitting, anyway).&lt;/p&gt;
&lt;p&gt;Oh, and I had some interesting work helping some (print) designers wrap their heads around some web thing. That was a ton of fun and maybe it will turn into more, we&#39;ll see.&lt;/p&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;p&gt;I&#39;ve been having a fit of escapism and churning through Harry Dresden novels at a high pace; as re-readings go, these are still quite good. I still don&#39;t like some things but I do still like how he grew the universe, something so many fantasy series fail at. This year really has been a year of re-reading incidentally; there are worse things.&lt;/p&gt;
&lt;h2&gt;Life&lt;/h2&gt;
&lt;p&gt;I had the yearly meeting of our daycare (which is set up as an association run by the parents). I&#39;m the data privacy person for another year which has really been quite interesting (thanks, GDPR); after focusing on the digital side (where I&#39;m more comfortable), it&#39;s time to focus on the physical side, where I look forward to learning a few new things. Otherwise, I was amazed how little drama we had; in the end, we seem to be good people, wanting to make things better.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://scoskey.org/&quot;&gt;Sam&lt;/a&gt; and I are back to regular meetings after a long summer which is just plain good. Besides good times, we are working on upgrades to &lt;a href=&quot;http://mathblogging.org/&quot;&gt;mathblogging.org&lt;/a&gt; and &lt;a href=&quot;http://boolesrings.org/&quot;&gt;boolesrings.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also think it may be time to finally fix my laptop&#39;s keyboard. First the left ctrl key went (which was fun to relearn with the right ctrl key), then the tick and some numbers started to become iffy (which gets annoying) but with the letter E starting to act up I&#39;m really coming to the end of the line. I don&#39;t know why I keep dragging it out. Let&#39;s see if I have an update in the next note, shall we?&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Weeknote 2019/38</title>
		<link href="https://www.peterkrautzberger.org/0212/"/>
		<updated>2019-09-21T00:00:00Z</updated>
		<id>https://www.peterkrautzberger.org/0212/</id>
		<content type="html">&lt;p&gt;Let&#39;s see if I can &lt;a href=&quot;https://www.peterkrautzberger.org/0211&quot;&gt;keep this up&lt;/a&gt;. I have a feeling these posts could be a collection of all the small bits and pieces that do not warrant a blog post.&lt;/p&gt;
&lt;h2&gt;Work&lt;/h2&gt;
&lt;p&gt;Work was full of organizational stuff - everything from reorganizing git repos to organizing people to organizing reporting data. So in many ways uneventful but for me usually a form of complementary exercise which gives me a productivity boost once all the end-of-quarter shenanigans are over.&lt;/p&gt;
&lt;h2&gt;Media&lt;/h2&gt;
&lt;p&gt;I&#39;ve been thinking about my media usage recently, in particular the role of podcasts and video hosting platforms (ok, mostly youtube at the moment).&lt;/p&gt;
&lt;p&gt;For the past two decades, the internet gradually eliminated any need (of mine) for TV consumption. Besides the obvious (there&#39;s a ton of media with a single subscription to a streaming service, a ton more with multiple subscriptions, and virtually all media in gray areas), I was pondering &amp;quot;TV programming&amp;quot; recently. It&#39;s something that many friends still describe as pleasing (switch on the TV and just watch something) and I would usually argue against it which seems odd since I was fairly addicted to it as a kid/ya. But recently I noticed how similar subscriptions to YouTube channels work. This is especially impressive with more original work such as &lt;a href=&quot;https://de.wikipedia.org/wiki/Druck_(Webserie)&quot;&gt;Druck&lt;/a&gt;, the German version of &lt;a href=&quot;https://de.wikipedia.org/wiki/Skam_(Fernsehserie)&quot;&gt;Skam&lt;/a&gt;, which timestamps its episodes and releases them on matching times of day. Reading about their approach (and watching a season, which was quite interesting in itself and as a parent) made me realize how I use my YouTube subscriptions like TV programming. It&#39;s ephemeral, passing me by, tuning in, maybe hopping to the next one. And yet it&#39;s way better than even tivo-era TV as it gives both the ephemeral and the archival.&lt;/p&gt;
&lt;p&gt;Similarly, podcasts (and again to some degree YouTube) have done much of the same for my radio consumption. Serious news stations like Deutschlandfunk, BBC 4, and various forms of NPR have been in my life since forever, and yet their consumption has been reduced to morning news and otherwise podcasts. In addition, podcasting covers anything from web industry to fiction, from comedy to whatever &lt;a href=&quot;https://blog.richter.fm/category/podcast/derweisheit&quot;&gt;Der Weisheit&lt;/a&gt; is (basically 4 friends chatting). I struggled to find interesting music podcasts (as in: playing contemporary popular music) for a while but I eventually found a few I liked; YouTube music channels do the rest.&lt;/p&gt;
&lt;p&gt;Anyhoo, just a reminder that this internet is wonderful, I guess.&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;I thought one way to use this format might be to just browse through Mastodon and see what I find (boosted or, gasp, original content). So here we go.&lt;/p&gt;
&lt;p&gt;Christian posted lovely 3D printable Láµ norm balls thing:&lt;/p&gt;
&lt;iframe src=&quot;https://mathstodon.xyz/@christianp/102807944228401858/embed&quot; class=&quot;mastodon-embed&quot; style=&quot;max-width: 100%; border: 0&quot; width=&quot;400&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;
&lt;iframe src=&quot;https://mathstodon.xyz/@christianp/102807949209412600/embed&quot; class=&quot;mastodon-embed&quot; style=&quot;max-width: 100%; border: 0&quot; width=&quot;400&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;David Eppstein linked to a glorious collection of Turing Complete things.&lt;/p&gt;
&lt;iframe src=&quot;https://mathstodon.xyz/@11011110/102789724968251958/embed&quot; class=&quot;mastodon-embed&quot; style=&quot;max-width: 100%; border: 0&quot; width=&quot;400&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;
&lt;script src=&quot;https://mathstodon.xyz/embed.js&quot; async=&quot;async&quot;&gt;&lt;/script&gt;
&lt;h2&gt;Life&lt;/h2&gt;
&lt;p&gt;We finally went to &lt;a href=&quot;https://fridaysforfuture.de/allefuersklima/&quot;&gt;fridays for future&lt;/a&gt; this week; the fucking least we can all do is to show up whenever we can and always support them.&lt;/p&gt;
&lt;p&gt;Oh, my keyboard; I wanted to get onto that, didn&#39;t I.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Using grid to split a table cell</title>
		<link href="https://www.peterkrautzberger.org/0213/"/>
		<updated>2019-12-31T00:00:00Z</updated>
		<id>https://www.peterkrautzberger.org/0213/</id>
		<content type="html">&lt;p&gt;Well that kind of a break sucked.&lt;/p&gt;
&lt;p&gt;The other day I got to think about a little problem: split table cells.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://www.peterkrautzberger.org/assets/2019/splitcell.png&quot; alt=&quot;a table with first cell containing column and header information, separated by a diagonal line&quot; /&gt;
&lt;figcaption&gt;Source &lt;a href=&quot;https://tex.stackexchange.com/q/89745&quot;&gt;tex.SE&lt;/a&gt;, CC-by-SA 4.0 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you search around the web for CSS solutions,&lt;br /&gt;
you&#39;ll mostly find more or less fiddly ones: &lt;a href=&quot;https://stackoverflow.com/questions/45506550/how-can-a-split-diagonally-a-table-header-cell&quot;&gt;this one from StackOverflow&lt;/a&gt; hacks a border by transforming it - awesome hackery. I also liked &lt;a href=&quot;https://en.wikipedia.org/wiki/Template:Diagonal_split_header&quot;&gt;Wikipedia&#39;s solution&lt;/a&gt;, which takes a standard strike-through using gradients and automatically calculates the specific values for margins to keep the &amp;quot;sub cells&amp;quot; from the diagonal.&lt;/p&gt;
&lt;p&gt;But I was thinking that we should be able to do better these days. Shouldn&#39;t we get to stop worrying about the dimensions of the content?&lt;/p&gt;
&lt;p&gt;Grid to the rescue.&lt;/p&gt;
&lt;style style=&quot;display: block; white-space: pre-wrap; margin-bottom: 1em;&quot;&gt;
.cell {
  display: grid;
  width: max-content;
  justify-content: space-between;
  grid-template-columns: repeat(2, 1fr);
  grid-auto-rows: 1fr;
  border: 1px solid #000;
  background: url(&quot;data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; version=&#39;1.1&#39; preserveAspectRatio=&#39;none&#39; viewBox=&#39;0 0 100 100&#39;&gt;&lt;line x1=&#39;0&#39; y1=&#39;0&#39; x2=&#39;100&#39; y2=&#39;100&#39; stroke=&#39;black&#39; vector-effect=&#39;non-scaling-stroke&#39;/&gt;&lt;/svg&gt;&quot;);
  background-size: 100% 100%;
  margin-bottom: 1rem;
}

.cell--topRight {
  grid-column-start: 2;
  text-align: right;
}

.cell--bottomLeft {
  grid-column-start: 1;
}
&lt;/style&gt;
&lt;div class=&quot;cell diag&quot; contenteditable=&quot;true&quot;&gt;
    &lt;div class=&quot;cell--topRight&quot;&gt;Top and Right&lt;/div&gt;
    &lt;div class=&quot;cell--bottomLeft&quot;&gt;Bottom and Left&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A simple 2x2 grid an inlined background SVG to draw the diagonal; column placement creates faux cells alongside auto-rows at 1fr ensure we don&#39;t cross the line. In other words, an (almost) content-agnostic split table cell.&lt;/p&gt;
&lt;p&gt;You can go ahead and edit the text to try it out. See if you can find some edge cases where it fails (and let me know if you find a real case).&lt;/p&gt;
&lt;p&gt;And in real life don&#39;t forget to add some non-visual hints to clarify which part is which, especially in a table head.&lt;/p&gt;
&lt;p&gt;Happy New Year.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Tech update</title>
		<link href="https://www.peterkrautzberger.org/0214/"/>
		<updated>2020-10-07T00:00:00Z</updated>
		<id>https://www.peterkrautzberger.org/0214/</id>
		<content type="html">&lt;p&gt;This site is nearing its 11th anniversary and the past year has not been kind to my writing around here. I can&#39;t even say there are a lot of drafts or some such, just a lot of emptiness after lots of hours in ICU waiting rooms and then straight into covid19.&lt;/p&gt;
&lt;p&gt;I&#39;ve been trying to get back to writing here and as these things tend to go, it took spare time over a few months to upgrade the underlying tech instead. A large part of this was playing around with MathJax, which migh seem somewhat silly since I don&#39;t write mathematics much anymore. However, I use MathJax a lot for work and it was time to implement a few things I had wanted to dogfood.&lt;/p&gt;
&lt;h2&gt;The basics&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/pkra/peterkrautzberger.org/commit/dad56ad9e9e8efd21486cd4345a7a6b652f48c1c&quot;&gt;Two years ago&lt;/a&gt;, I switched from &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; (to which I had at some point added a &lt;a href=&quot;https://github.com/pkra/peterkrautzberger.org/commit/2be9697f9fc4900da285eac705e5cca1785ccac9&quot;&gt;travis build&lt;/a&gt; to run &lt;a href=&quot;https://github.com/mathjax/MathJax-node&quot;&gt;mathjax-node&lt;/a&gt;) to &lt;a href=&quot;https://github.com/11ty/eleventy&quot;&gt;eleventy&lt;/a&gt;. The primary reason was that I wanted more control over my build and since I work primarily with (vanilla) JavaScript, eleventy was (and continues to be) a very good choice. But I didn&#39;t find time to work out a proper integration of mathjax-node so I went back to client-side MathJax (naturally with its accessibility extension active by default).&lt;/p&gt;
&lt;p&gt;So obviously I upgraded eleventy which went as smooth as can be - just some minor plugin changes.&lt;/p&gt;
&lt;h2&gt;the new stuff&lt;/h2&gt;
&lt;p&gt;The step back to client-side MathJax was supposed to get me two steps forward towards testing my new tech here. But shit hit the fan and here we are two years later.&lt;/p&gt;
&lt;p&gt;Since &lt;a href=&quot;https://www.peterkrautzberger.org/0209/&quot;&gt;my last significant piece of writing around here&lt;/a&gt;, I&#39;ve been continuing to work on accessible and explorable server-side MathJax rendering (and beyond that more generally &amp;quot;complex&amp;quot; content). I favor MathJax&#39;s SVG output for both technical and philosophical reasons but a key problem for the (now retired) &lt;a href=&quot;https://github.com/krautzource/mathjax-sre-walker/&quot;&gt;mathjax-sre-walker&lt;/a&gt; had been that MathJax v2 dropped some internal structure in its SVG output (to get smaller SVGs), which in particular meant that any table construction failed to become explorable.&lt;/p&gt;
&lt;p&gt;So really rolling out these exploration ideas meant upgrading to MathJax v3 - which was a bit of a pain, to be honest. I have many (many) feelings about MathJax v3 and should do a post on it at some point. But for now let&#39;s just say that I ran into many small bugs, some fixed but not released, others not yet fixed when I found them. All in all, maybe a dozen bugs that just dragged things out.&lt;/p&gt;
&lt;p&gt;At the same time, my exploration tooling continued to evolve and mathjax-sre-walker has now been retired in favor of &lt;a href=&quot;https://github.com/krautzource/aria-tree-walker&quot;&gt;aria-tree-walker&lt;/a&gt; as well as &lt;a href=&quot;https://github.com/krautzource/sre-to-tree/&quot;&gt;sre-to-tree&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aria-tree-walker is a tiny (&amp;lt;1kb zipped) walker for ARIA trees with a fairly specific markup structure: the tree is marked up via aria-owns and each tree item is named by an aria-label. Sre-to-tree translates SRE&#39;s structural information to just such a suitable tree. Rolling out the walker led to me finding several minor bugs found in &lt;a href=&quot;https://github.com/zorkow/speech-rule-engine/&quot;&gt;speech-rule-engine&lt;/a&gt;, thus more delay. (But don&#39;t get me wrong, Davide and Volker have been super responsive as always when it came to these bugs.)&lt;/p&gt;
&lt;p&gt;So 3-4 moving pieces for equations, lots of bugs, lots of growing pains. Fun stuff really and the main point why I wanted to test these technologies here.&lt;/p&gt;
&lt;h2&gt;markdown&lt;/h2&gt;
&lt;p&gt;The third part was to integrate these moving pieces back into eleventy. Fortunately, I found an existing markdown+mathjax plugin that was designed to not just ignore TeX content but render it server-side. Unfortunately, &lt;a href=&quot;https://github.com/tani/markdown-it-mathjax3&quot;&gt;markdown-it-mathjax3&lt;/a&gt; wasn&#39;t quite flexible enough to let me do my thing. But it helped me solve a major problem: hooking into markdown(-it) processing. So &lt;a href=&quot;https://github.com/pkra/peterkrautzberger.org/blob/e30b9db2761482b57fc9c6f414d41f331bcdd05d/markdown-it-mathjax3-hacked.js&quot;&gt;I forked it&lt;/a&gt; to hook into &lt;a href=&quot;https://github.com/pkra/peterkrautzberger.org/blob/e30b9db2761482b57fc9c6f414d41f331bcdd05d/tex2svg-tree.js&quot;&gt;my custom MathJax v3 setup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As a side effect, a ton of markdown content broke because markdown-it-mathjax follows pandoc&#39;s TeX-in-markdown rules and my old writing didn&#39;t adhere to that. Which took me through a fun romp of my content, &lt;a href=&quot;https://github.com/pkra/peterkrautzberger.org/commit/f3a73f7c713610938a07fc11faaa04229294895c&quot;&gt;fixing lots of stuff&lt;/a&gt;, including more errors from previous rewrites (embarassing) and also bugs in the tooling (awesome). Some posts hold up rather well, others not so much; I should maybe write about that some time (ahaha, listen to yourself, man).&lt;/p&gt;
&lt;p&gt;Finally, some CSS and JS updates were in order: adding the aria-tree-walker when necessary and styling the exploration - which led to yet more bug reports (yay). After &lt;a href=&quot;https://mathstodon.xyz/@pkra/104970592018504650&quot;&gt;teasing myself on mathstodon&lt;/a&gt; I was finally ready to push it out last week. In the end, the setup isn&#39;t the most efficient but it&#39;s ok for now; a 1 min build time is bareable and yet probably enough pressure to optimize later.&lt;/p&gt;
&lt;h2&gt;Coda&lt;/h2&gt;
&lt;p&gt;No next steps as life gets in the way too much these days. Ping me if you have any questions on the setup. For good measure, here&#39;s an equation which should - final piece - also render in the atom/rss feed (though exploration will probably fail as most feed readers won&#39;t run JavaScript). &lt;a href=&quot;https://krautzource.github.io/aria-tree-walker/&quot;&gt;As described in the aria-tree-walker docs&lt;/a&gt; AT users will get the full text in browse mode but can switch to focus mode to explore with arrow keys; visual users can focus the equation (e.g., tab to it or left-click it) and then explore.&lt;/p&gt;
&lt;tex-block&gt;\operatorname{FS}(x_i)_{i\in \omega} = \left\{ \sum_{k \in s} x_k | s \subseteq_f \omega \right\}
&lt;/tex-block&gt;</content>
	</entry>
	
	<entry>
		<title>A MathJax extension for specifying the accessible name</title>
		<link href="https://www.peterkrautzberger.org/0215/"/>
		<updated>2020-10-12T00:00:00Z</updated>
		<id>https://www.peterkrautzberger.org/0215/</id>
		<content type="html">&lt;p&gt;Look at me writing two posts in a year! October is World Blindness Awareness Month, so let&#39;s solve one of the critical missing pieces for accessible equation rendering on the web! Am I exaggerating? Only a little.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.peterkrautzberger.org/0214/&quot;&gt;Previously&lt;/a&gt;, I had mentioned an update on my work on the &lt;a href=&quot;https://github.com/krautzource/aria-tree-walker&quot;&gt;aria-tree walker&lt;/a&gt; (formerly known as &lt;a href=&quot;https://github.com/krautzource/mathjax-sre-walker/&quot;&gt;mathjax-sre-walker&lt;/a&gt;, see also &lt;a href=&quot;https://www.peterkrautzberger.org/0209/&quot;&gt;No. 209&lt;/a&gt;). While a longer piece on this may be warranted, let me focus on a closely related issue - fixing accessible names when necessary, a problem the walker solves in part.&lt;/p&gt;
&lt;h2&gt;Fantastic heuristics...&lt;/h2&gt;
&lt;p&gt;While heuristics can be useful (e.g., user agents dealing with invalid markup or Chrome&#39;s machine-learning-based image descriptions), it is always better to avoid them. Nobody likes a guessing game. This gets tricky however with content that cannot work without heuristics, e.g., equations.&lt;/p&gt;
&lt;p&gt;To quote myself, equations are &lt;a href=&quot;https://www.peterkrautzberger.org/0196/&quot;&gt;simply pretty terrible all around&lt;/a&gt; and not at all accessible (in the sense of web accessibility). So far, the best you can do is to use &lt;a href=&quot;http://docs.mathjax.org/en/latest/basic/a11y-extensions.html&quot;&gt;MathJax&#39;s accessibility extensions&lt;/a&gt; to leverage the incredible heuristics provided by &lt;a href=&quot;https://github.com/zorkow/speech-rule-engine/&quot;&gt;Speech Rule Engine&lt;/a&gt;. All solutions around equations require heuristics and this is the best tool available.&lt;/p&gt;
&lt;p&gt;And yet even with the best heuristics your content will still suck &lt;a href=&quot;https://hyperboleandahalf.blogspot.com/2010/04/alot-is-better-than-you-at-everything.html&quot;&gt;alot&lt;/a&gt;. Why? Because heuristics inevitably hit their limits and provide poor results in edge cases (and how quickly that happens is usually outside your control). Your advantage is that you have least &lt;em&gt;something&lt;/em&gt; as opposed to nothing when a dictionary-based approach fails.&lt;/p&gt;
&lt;p&gt;So what to do? If you cannot avoid heuristics, then the next best thing is to apply heuristics-based tools server-side; client-side heuristics should always be a last resort. Besides the obvious perks, you end up with a static bit of content that you &lt;strong&gt;can&lt;/strong&gt; fix if necessary. Coming back to the aria-tree-walker, if you look at any of the examples in its docs and are unhappy with the accessible name of some part, you can simply edit it. Then it&#39;s fixed. That&#39;s a huge step forward. And yet.&lt;/p&gt;
&lt;h2&gt;... and where to fight them&lt;/h2&gt;
&lt;p&gt;Fixing accessibility issues can be hard. Even the best content might turn out to not work as expected or be facing an insurmountable bug somewhere along the way to the user, forcing you to work around things. Ideally, you can apply a fix at the source but often fixes in post-production are the only way. If your content requires heuristics, you now have two problems: you need a fix and you need to override the heuristics to prevent them from ignoring your fix. That&#39;s a lot to ask.&lt;/p&gt;
&lt;p&gt;For Speech Rule Engine (and thus MathJax), this problem now has a first solution: my &lt;a href=&quot;https://github.com/zorkow/speech-rule-engine/issues/157&quot;&gt;feature request from 2017&lt;/a&gt; has been implemented and we now have support for aria-label. This means you can override the accessible name at the source and Speech Rule Engine will honor it. Even better, this can give you the best of both worlds: if you label a non-atomic expression, users will still be able to dive in and explore the heuristics-based version. That&#39;s in fact, nothing new - if you explore something labeled &lt;q&gt;x squared&lt;/q&gt; you might come up against &lt;q&gt;exponent 2&lt;/q&gt; - but it&#39;s worth repeating as it is incredibly powerful for users.&lt;/p&gt;
&lt;h2&gt;At the source&lt;/h2&gt;
&lt;p&gt;Of course, having some internal markup facility makes things a bit more difficult for authors. Most likely they use better formats than MathML to feed into SRE&#39;s heuristics. If we cannot give authors control at the source (no, not &lt;a href=&quot;https://matrix.fandom.com/wiki/The_Source&quot;&gt;that source&lt;/a&gt;), we can never hold them accountable. So let&#39;s solve this for MathJax&#39;s TeX input.&lt;/p&gt;
&lt;p&gt;The repository &lt;a href=&quot;https://github.com/krautzource/mathjax-aria-label/&quot;&gt;mathjax-aria-label&lt;/a&gt; hosts a MathJax v3 extension for the TeX input providing a simple macro: &lt;code&gt;\arialabel{}{}&lt;/code&gt;. The macro takes two arguments: the first argument becomes the value of the aria-label attribute on a wrapper around whatever the second argument becomes. This macro is of course most useful when used in other macros, either with a fixed name or with a constructed name (e.g., a small caps macro could do something like &lt;code&gt;\arialabel{small caps #1}{#1}&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The repository has a &lt;a href=&quot;https://krautzource.github.io/mathjax-aria-label/&quot;&gt;small example on GitHub pages&lt;/a&gt; and below is a short recording of &lt;a href=&quot;https://help.gnome.org/users/orca/stable/&quot;&gt;Orca&lt;/a&gt; reading the examples in Firefox.&lt;/p&gt;
&lt;video controls=&quot;&quot; width=&quot;auto&quot; style=&quot;width: 100%;&quot;&gt;
&lt;source src=&quot;https://www.peterkrautzberger.org/assets/2020/MathJax-aria-label_Orca_Firefox.mp4&quot; type=&quot;video/webm&quot; /&gt;
Sorry, your browser doesn&#39;t support this embedded video.
&lt;/video&gt;
&lt;p&gt;I hope this gives a first idea of the kind of benefits this simple macro and the underlying technology can enable.&lt;/p&gt;
&lt;h2&gt;Coda&lt;/h2&gt;
&lt;p&gt;There&#39;s nothing wrong with using heuristic-based tools for accessibility purposes if you have no other recourse. Just make sure you can override the heuristics when they fall short. With equations, we just took a good step forward: authors are no longer coerced to rely on heuristics out of their control.&lt;/p&gt;
&lt;p&gt;Reversely, authors can now fix such issues and so they should feel an obligation to do so. Authors can (and should) start thinking about how their own voice comes together in this beautiful medium we call the web.&lt;/p&gt;
&lt;p&gt;This is a good thing. If we cannot give authors full control over their content, we will never reach the web&#39;s full potential.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>ATHEN STEM Accessibility Conference 2022</title>
		<link href="https://www.peterkrautzberger.org/0216/"/>
		<updated>2022-07-03T00:00:00Z</updated>
		<id>https://www.peterkrautzberger.org/0216/</id>
		<content type="html">&lt;p&gt;This is the first time I skipped writing for over a year, I think. Well, good riddance, 2021. You took too much.&lt;/p&gt;
&lt;p&gt;I meant to write about this back in February, right after the conference, traveling south for a couple calm days with friends. But then a fucking war started, a few hundred kilometers away and it all seemed absurd. It still seems absurd. It is terrifying and horrible. War is the most horrible thing.&lt;/p&gt;
&lt;p&gt;I&#39;m slowly coming out of a few really bad years but none of it compares in the least to the horror the people of Ukraine are experiencing.&lt;/p&gt;
&lt;p&gt;I cling to making things normal again. Writing here is something I have wished to come back to again after all this time. The chances that it works out are slim. Too much has happened. Too much still hurts. But I&#39;ll try.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I gave a talk at &lt;a href=&quot;https://athenpro.org/content/athen-virtual-conference&quot;&gt;ATHEN STEM Accessibility Conference 2022&lt;/a&gt; in February. I spoke about the work I do for the &lt;a href=&quot;https://www.ams.org/&quot;&gt;American Mathematical Society&lt;/a&gt;, primarily how we approach print equation layout on the web, in particular using &lt;a href=&quot;https://github.com/krautzource/aria-tree-walker&quot;&gt;aria-tree-walker&lt;/a&gt; and server-side MathJax.&lt;/p&gt;
&lt;p&gt;You can find &lt;a href=&quot;https://pkra.github.io/2022-athen-stem-conf/&quot;&gt;the slides on github&lt;/a&gt;. They include a bunch of short videos (without captioning, I&#39;m afraid). They&#39;re all done with a real world OA article so you can try to reproduce things.&lt;/p&gt;
&lt;p&gt;There&#39;s also a recording of my talk available from their site. If you can&#39;t access that, ping me and I&#39;ll see what I can do.&lt;/p&gt;
&lt;p&gt;The rest of the conference was somewhat depressing for me. It was example after example of how the empty promises of MathML keep people in the US educational sector in a kind of Stockholm syndrome. Case study after case study showed how flawed everything is both in theory and practice. And yet they cling to 25 years of lies and falsehoods. It would be sad if it wasn&#39;t so incredibly self-inflicted. And infuriatingly dishonest to the students.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>(Print) &quot;Algorithm Layout&quot; in HTML and CSS</title>
		<link href="https://www.peterkrautzberger.org/0217/"/>
		<updated>2022-07-26T00:00:00Z</updated>
		<id>https://www.peterkrautzberger.org/0217/</id>
		<content type="html">&lt;p&gt;July 2022. I started this piece well over three years ago (some time before June 2019 in any case). As it &lt;s&gt;came along&lt;/s&gt; grew out of proportion, I had tried turning it into three pieces but never got far enough to start publishing it. Then I tried to recombine them (some time in 2020?) in the hopes of finally pushing them out but didn&#39;t finish the last few pieces. Then 2021 was worse than 2020 and now it&#39;s 2022. So I&#39;m thinking I will make this a new kind of piece around here: a partially complete piece of writing that may (or more likely: may not) get edits and updates. Let&#39;s jump in then.&lt;/p&gt;
&lt;p&gt;A while ago I started to think about &amp;quot;algorithm layout&amp;quot;. Not syntax highlighting of source code (which &lt;a href=&quot;https://prismjs.com/&quot;&gt;prism.js&lt;/a&gt; handles nicely) but the kind of print traditions captured in the following image.&lt;/p&gt;
&lt;img src=&quot;https://www.peterkrautzberger.org/assets/2020/euclid.png&quot; alt=&quot;Euclid&#39;s algorithm typeset using LaTeX&#39;s algorithmicx package&quot; /&gt;
&lt;h2&gt;Part 1. Prior art and the problem of content conversion&lt;/h2&gt;
&lt;p&gt;If you&#39;re familiar with LaTeX packages such as algorithmicx or algorithm2e you&#39;ll recognize this particular style of layout. As the names of those packages imply, this type of content is more about the abstract algorithms and less about implementation details in a specific language.&lt;/p&gt;
&lt;p&gt;Realizing this specific style on the web is an interesting challenge. On the one hand, it&#39;s a problem of realizing print layout traditions on the web, an area I deal with professionally on a daily basis. On the other hand, there&#39;s an authoring problem behind this: realizing print layout is one thing, realizing it in a way that allows for a good (web!) reading &lt;em&gt;and&lt;/em&gt; authoring experience is another.&lt;/p&gt;
&lt;p&gt;When I started this side project, I had only had a quick look at some tools that solve this problem and before I wanted to write about what I did, I thought I should take another, closer look at them to provide context (and check my own work). I&#39;m glad I didn&#39;t look too closely earlier since that may have sent me off in a completely different direction. It also reminded me of the pitfalls of authoring, in particular print content and conversion.&lt;/p&gt;
&lt;h3&gt;Prior art 1: algorithmicx&lt;/h3&gt;
&lt;p&gt;To pick a starting point, let&#39;s use a classic in every sense of the word: Euclid&#39;s algorithm.&lt;/p&gt;
&lt;p&gt;Here&#39;s what you&#39;d write using the &lt;a href=&quot;https://ctan.org/pkg/algorithmicx&quot;&gt;algorithmicx&lt;/a&gt; LaTeX package.&lt;/p&gt;
&lt;pre class=&quot;language-latex&quot;&gt;&lt;code class=&quot;language-latex&quot;&gt;&lt;span class=&quot;token function selector&quot;&gt;\begin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function selector&quot;&gt;\caption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Euclid&#39;s algorithm&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token function selector&quot;&gt;\label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;euclid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function selector&quot;&gt;\begin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;algorithmic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function selector&quot;&gt;\Procedure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Euclid&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token equation string&quot;&gt;$a,b$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token function selector&quot;&gt;\Comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;The g.c.d. of a and b&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function selector&quot;&gt;\State&lt;/span&gt; &lt;span class=&quot;token equation string&quot;&gt;$r&lt;span class=&quot;token equation-command regex&quot;&gt;\gets&lt;/span&gt; a&lt;span class=&quot;token equation-command regex&quot;&gt;\bmod&lt;/span&gt; b$&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function selector&quot;&gt;\While&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token equation string&quot;&gt;$r&lt;span class=&quot;token equation-command regex&quot;&gt;\not&lt;/span&gt;=0$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token function selector&quot;&gt;\Comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;We have the answer if r is 0&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token function selector&quot;&gt;\State&lt;/span&gt; &lt;span class=&quot;token equation string&quot;&gt;$a&lt;span class=&quot;token equation-command regex&quot;&gt;\gets&lt;/span&gt; b$&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token function selector&quot;&gt;\State&lt;/span&gt; &lt;span class=&quot;token equation string&quot;&gt;$b&lt;span class=&quot;token equation-command regex&quot;&gt;\gets&lt;/span&gt; r$&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token function selector&quot;&gt;\State&lt;/span&gt; &lt;span class=&quot;token equation string&quot;&gt;$r&lt;span class=&quot;token equation-command regex&quot;&gt;\gets&lt;/span&gt; a&lt;span class=&quot;token equation-command regex&quot;&gt;\bmod&lt;/span&gt; b$&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function selector&quot;&gt;\EndWhile&lt;/span&gt;&lt;span class=&quot;token function selector&quot;&gt;\label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;euclidendwhile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function selector&quot;&gt;\State&lt;/span&gt; &lt;span class=&quot;token function selector&quot;&gt;\textbf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;return&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token equation string&quot;&gt;$b$&lt;/span&gt;&lt;span class=&quot;token function selector&quot;&gt;\Comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;The gcd is b&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function selector&quot;&gt;\EndProcedure&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function selector&quot;&gt;\end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;algorithmic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function selector&quot;&gt;\end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and you&#39;d get the image from earlier. It&#39;s fun to note that this source is straight from the package documentation, including inconsistencies (such as a mismatch of math mode in states and comments).&lt;/p&gt;
&lt;p&gt;Let&#39;s naively HTML-ify this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;algorithm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;caption&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;euclid&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Euclid&#39;s algorithm&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;caption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;algorithmic&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;numberLineSkip&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;procedure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Euclid&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;a,b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;The g.c.d. of a and b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;r â a mod b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;r =Ì¸ 0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;We have the answer if r is 0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;a â b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;b â r&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;r â a mod b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;strong&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;return&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;strong&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;The gcd is b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;procedure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;algorithmic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;algorithm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That seems fairly straight forward even if the label &amp;quot;euclidendwhile&amp;quot; has been lost.&lt;/p&gt;
&lt;p&gt;TODO I&#39;d like to focus on two problems&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to get from here to something we can style easily (for the web)&lt;/li&gt;
&lt;li&gt;while keeping things relatively easy to style (and customize/extend)&lt;/li&gt;
&lt;li&gt;while keeping things relatively easy to author&lt;/li&gt;
&lt;li&gt;while making this accessible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or put differently: how to move from content conversion to content authoring.&lt;/p&gt;
&lt;h3&gt;Pior art 2: latexml&lt;/h3&gt;
&lt;p&gt;While I personally wouldn&#39;t recommend it, latexml is an interesting option to consider because it is so heavily focuses on extracting semantic structure from print documents.&lt;/p&gt;
&lt;p&gt;Here&#39;s a codepen embedding of what you&#39;d get from it:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;result&quot; data-user=&quot;pkra&quot; data-slug-hash=&quot;8c2d4358f4fd67d595c78e3e287af6e8&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Algorithms via LaTeXML&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/pkra/pen/8c2d4358f4fd67d595c78e3e287af6e8&quot;&gt;
  Algorithms via LaTeXML&lt;/a&gt; by Peter Krautzberger (&lt;a href=&quot;https://codepen.io/pkra&quot;&gt;@pkra&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;So to me this is a terrible mess of markup and layout but it&#39;s not surprising given what latexml focuses on. When you get into the business of generating HTML and CSS from things that are fairly far removed from HTML and CSS (here: long form print documents) you are bound to create such a mess of a markup. That&#39;s not a criticism; I think it&#39;s simply inevitable.&lt;/p&gt;
&lt;p&gt;After all, an author who uses latexml was not interested in authoring web content. Instead, they authored print content using LaTeX and then used a second piece of software (filled to the brim with heuristics) to generate a close approximation of the print product in a custom XML. In a third step, they created HTML and CSS from that.&lt;/p&gt;
&lt;p&gt;Nevertheless, there is a lot of noise in this which may make it hard to explore the example. Here&#39;s another codepen embedding with a more minimal version of the latexml output that has (hopefully) less noise and still exhibits the inherent issues I see with this approach towards authoring of web content.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;result&quot; data-user=&quot;pkra&quot; data-slug-hash=&quot;f6c5ff9db52d4e0f6cc903b288c21741&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Algorithms via LaTeXML, reduced&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/pkra/pen/f6c5ff9db52d4e0f6cc903b288c21741&quot;&gt;
  Algorithms via LaTeXML, reduced&lt;/a&gt; by Peter Krautzberger (&lt;a href=&quot;https://codepen.io/pkra&quot;&gt;@pkra&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;A quick list of things that jump out when going through this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;functional/atomic CSS (in the tailwind or tachyon sense), e.g., a border-top class, a small-caps class, a bold class - a natural concept for content conversion from an only potentially structured format like TeX.&lt;/li&gt;
&lt;li&gt;inline styles - usually necessary when print layout is mimicked in detail (though somewhat surprising in this particular case which looks like it could be replaced by a functional class if you think about it from a TeX point of view)&lt;/li&gt;
&lt;li&gt;the weird case of line 3 - it looks like a bug that the comment is wrapped in the bold part of the &lt;code&gt;while...do&lt;/code&gt; construct and thus needs a font weight override (but maybe it&#39;s a weird thing in the LaTeX package)&lt;/li&gt;
&lt;li&gt;right-floating comments can overlap on small viewports&lt;/li&gt;
&lt;li&gt;line counters and comment markers are yucky (much worse in the original)&lt;/li&gt;
&lt;li&gt;divs and spans galore. Each &amp;quot;line&amp;quot; is a div but the line counter and state are wrapped together&lt;/li&gt;
&lt;li&gt;and the &amp;quot;highlight&amp;quot;: repeated nbsp&#39;s to create indentation. Yikes, the 90s want their spacer GIFs back. (But again, this might be a faithful conversion from how the LaTeX package realizes the print layout.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;m not trying to complain too much here. Again, this is mostly what you&#39;d expect when you build a tool like latexml. Print is just a crappy format to generate web content from and even good LaTeX can&#39;t save you from that fact.&lt;/p&gt;
&lt;h3&gt;Prior art 2: pseudocode&lt;/h3&gt;
&lt;p&gt;The next example is a probably less known JS library called pseudocode.js.&lt;/p&gt;
&lt;p&gt;Here&#39;s again a codepen embedding of what we might get.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;result&quot; data-user=&quot;pkra&quot; data-slug-hash=&quot;0d056d577e3891483c4e60adf83db41c&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;pseudocode.js&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/pkra/pen/0d056d577e3891483c4e60adf83db41c&quot;&gt;
  pseudocode.js&lt;/a&gt; by Peter Krautzberger (&lt;a href=&quot;https://codepen.io/pkra&quot;&gt;@pkra&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Cleaning it up a bit seems harder given. Maybe that&#39;s because it is closer to thinking in terms of web design (as opposed to print-reproduction). But we can delete the equation layout mess (which is weirdly inconsistent in the algorithmicx source anyway).&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;pkra&quot; data-slug-hash=&quot;5d3a2662d84306e0dac071528e48d8ca&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;pseudocode.js, reduced&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/pkra/pen/5d3a2662d84306e0dac071528e48d8ca&quot;&gt;
  pseudocode.js, reduced&lt;/a&gt; by Peter Krautzberger (&lt;a href=&quot;https://codepen.io/pkra&quot;&gt;@pkra&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Again some random observations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;moar divs. Not even a figure/figcaption (but a class &lt;code&gt;with-caption&lt;/code&gt;); that&#39;s a bit disappointing.&lt;/li&gt;
&lt;li&gt;decent line-wrapping on small screens is nice&lt;/li&gt;
&lt;li&gt;class names are less functional and more semantic (in the sense of layout), e.g., ps-line. That kind of intent seems appropriate.&lt;/li&gt;
&lt;li&gt;odd inline styles
&lt;ul&gt;
&lt;li&gt;canceling things out: &lt;code&gt;style=&amp;quot;text-indent:-1.2em;padding-left:1.2em;&amp;quot;&lt;/code&gt; is a funny extreme but probably just a side effect of the overall strategy to combine margin-right with negative text-indent.&lt;/li&gt;
&lt;li&gt;rounding issues &lt;code&gt;style=&amp;quot;margin-left:1.7999999999999998em;&amp;quot;&lt;/code&gt; - just a bug but makes me wonder about code quality (ok, not really).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;relative positioning. Feels weird to me for this kind of layout (of course it&#39;s at the heart of how this particular approach works)&lt;/li&gt;
&lt;li&gt;nested substructures - that is right up my alley (more on that later hopefully). Stacking margin-left is neat but comes at the price of negative text-indent shenanigans for the line counters; I don&#39;t get why the margin is inline CSS rather than a class but there&#39;s possibly a decent reason for that (e.g., authoring).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Coda Part 1.&lt;/h3&gt;
&lt;p&gt;In both cases, the main reason why I find these approaches lacking lies, I think, in the fact that they are the result of (print) content conversion. The disconnect between the authoring and the layout is too large to get one in touch with the other. This is a loss for both sides: the layout gets messy and the author comes no closer to understanding the medium they author for.&lt;/p&gt;
&lt;p&gt;A typical side effect of this shows when you want to modify the output: neither output can be re-arranged efficiently. Usually, all you can do is go to the source, change it, and convert it again. We&#39;llcome back to that later.&lt;/p&gt;
&lt;p&gt;To be clear, I&#39;m not saying that some of the &amp;quot;bad&amp;quot; design decisions could be avoided; I definitely haven&#39;t found a way around every pain point. But my experience has been that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_the_instrument&quot;&gt;law of the instrument&lt;/a&gt; is at the heart of the problem. Content conversion inevitably leads to certain types of hacks (such as meaningless DOM structures, class names and inline styles) to allow authors customizations without them having to think about the actual medium. If it&#39;s content conversion from a format meant for print, this is problem exacerbated because the media and their traditions often match poorly. But once those hacky instruments are in the tool belt, it&#39;s hard not to use them and you end up with hacks all the way down.&lt;/p&gt;
&lt;p&gt;In the next part, I&#39;ll explore a different approach, also thinking about it from the perspective of the source material but hopefully with some level of detachment. After that, perhaps I&#39;ll find time to jot down some ideas on how to move towards authoring. But this piece has been more fun than I thought it would be; it&#39;s been interesting to dive a little deeper into these two after trying things on my own; good to see similarities and differences.&lt;/p&gt;
&lt;h2&gt;Part 2. A first draft&lt;/h2&gt;
&lt;p&gt;Let&#39;s go back to the beginning.&lt;/p&gt;
&lt;img src=&quot;https://www.peterkrautzberger.org/assets/2020/euclid.png&quot; alt=&quot;Euclid&#39;s algorithm typeset using LaTeX&#39;s algorithmicx package&quot; /&gt;
&lt;p&gt;In Part 1 I started at the wrong end, so to speak, and I looked at solutions that try to be keep the spirit of the print source, both in authoring &amp;quot;convenience&amp;quot; and layout design. I also outlined what I think of as issues and limitations of such (print) content conversion.&lt;/p&gt;
&lt;p&gt;Still, it is painfully fascinating. I wanted to find another way of dealing with this problem and, ideally, learning (with detachement) from the print authoring experience to enable web authoring.&lt;/p&gt;
&lt;h3&gt;Back to the source: algorithmicx (again)&lt;/h3&gt;
&lt;p&gt;Again, we keep to the classics and Euclid&#39;s algorithm.&lt;/p&gt;
&lt;p&gt;Here&#39;s what you&#39;d write in algorithmicx.&lt;/p&gt;
&lt;pre class=&quot;language-latex&quot;&gt;&lt;code class=&quot;language-latex&quot;&gt;&lt;span class=&quot;token function selector&quot;&gt;\begin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function selector&quot;&gt;\caption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Euclid&#39;s algorithm&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token function selector&quot;&gt;\label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;euclid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function selector&quot;&gt;\begin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;algorithmic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function selector&quot;&gt;\Procedure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Euclid&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token equation string&quot;&gt;$a,b$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token function selector&quot;&gt;\Comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;The g.c.d. of a and b&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function selector&quot;&gt;\State&lt;/span&gt; &lt;span class=&quot;token equation string&quot;&gt;$r&lt;span class=&quot;token equation-command regex&quot;&gt;\gets&lt;/span&gt; a&lt;span class=&quot;token equation-command regex&quot;&gt;\bmod&lt;/span&gt; b$&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function selector&quot;&gt;\While&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token equation string&quot;&gt;$r&lt;span class=&quot;token equation-command regex&quot;&gt;\not&lt;/span&gt;=0$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token function selector&quot;&gt;\Comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;We have the answer if r is 0&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token function selector&quot;&gt;\State&lt;/span&gt; &lt;span class=&quot;token equation string&quot;&gt;$a&lt;span class=&quot;token equation-command regex&quot;&gt;\gets&lt;/span&gt; b$&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token function selector&quot;&gt;\State&lt;/span&gt; &lt;span class=&quot;token equation string&quot;&gt;$b&lt;span class=&quot;token equation-command regex&quot;&gt;\gets&lt;/span&gt; r$&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token function selector&quot;&gt;\State&lt;/span&gt; &lt;span class=&quot;token equation string&quot;&gt;$r&lt;span class=&quot;token equation-command regex&quot;&gt;\gets&lt;/span&gt; a&lt;span class=&quot;token equation-command regex&quot;&gt;\bmod&lt;/span&gt; b$&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function selector&quot;&gt;\EndWhile&lt;/span&gt;&lt;span class=&quot;token function selector&quot;&gt;\label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;euclidendwhile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function selector&quot;&gt;\State&lt;/span&gt; &lt;span class=&quot;token function selector&quot;&gt;\textbf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;return&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token equation string&quot;&gt;$b$&lt;/span&gt;&lt;span class=&quot;token function selector&quot;&gt;\Comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;The gcd is b&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function selector&quot;&gt;\EndProcedure&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function selector&quot;&gt;\end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;algorithmic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function selector&quot;&gt;\end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and you&#39;d get the image from earlier. And here&#39;s our naive HTML-ification again:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;algorithm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;caption&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;euclid&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Euclid&#39;s algorithm&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;caption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;algorithmic&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;numberLineSkip&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;procedure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Euclid&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;a,b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;The g.c.d. of a and b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;r â a mod b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;r =Ì¸ 0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;We have the answer if r is 0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;a â b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;b â r&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;r â a mod b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;strong&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;return&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;strong&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;The gcd is b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;procedure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;algorithmic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;algorithm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some random thoughts when looking at this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we should obviously use a figure with figcaption element for HTML; maybe sprinkle some aria-roledescription in there.&lt;/li&gt;
&lt;li&gt;CSS pseudo-content seems an obvious choice for &amp;quot;Procedure&amp;quot; and &amp;quot;While...do / done&amp;quot;.&lt;/li&gt;
&lt;li&gt;why don&#39;t those comments align? Seems worth changing.&lt;/li&gt;
&lt;li&gt;As I mentioned already, I like the nesting (Procedure/EndProcedure, While/EndWhile). We should find a way to keep it. But that also seems hard thanks to those line counters.&lt;/li&gt;
&lt;li&gt;This layout is obviously a case for grid&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;head on&lt;/h3&gt;
&lt;p&gt;So let&#39;s try not to overthink this, let&#39;s try not to take more than inspiration from the source, let&#39;s try to think about the layout, its meaning, and how it could work &lt;a href=&quot;https://frankchimero.com/blog/2015/the-webs-grain/&quot;&gt;with the web&#39;s grain&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What do we need at first sight?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;multiple lines of 3 columns: counter, content, comment
&lt;ul&gt;
&lt;li&gt;get nice alignment&lt;/li&gt;
&lt;li&gt;try to avoid tables (for both layout and accessibility but it&#39;s complicated; maybe more on that later)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;a way to handle begin/end type of things (subroutines, loops etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again, the obvious modern choice for two dimensional layouts is CSS grid. And CSS counters should help as well:&lt;/p&gt;
&lt;style&gt;
section {
  margin-bottom: 1em;
  overflow: auto;
}

.sc {
  font-variant: small-caps;
}
&lt;/style&gt;
&lt;style&gt;.algorithm {
  counter-reset: algolinecounter;
  display: grid;
  grid-template-columns: repeat(3, max-content);
  grid-column-gap: 1em;
}
&lt;/style&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.algorithm&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;counter-reset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; algolinecounter&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; grid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; max-content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;grid-column-gap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To try it out, here&#39;s a dummy set of two &amp;quot;lines&amp;quot;, first as part of the page then as code.&lt;/p&gt;
&lt;section class=&quot;algorithm&quot;&gt;
    &lt;div&gt;Counter&lt;/div&gt;
    &lt;div&gt;Content&lt;/div&gt;
    &lt;div&gt;Comment&lt;/div&gt;
    &lt;div&gt;Counter&lt;/div&gt;
    &lt;div&gt;Content&lt;/div&gt;
    &lt;div&gt;Comment&lt;/div&gt;
&lt;/section&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;algorithm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Counter&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Content&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Comment&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Counter&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Content&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Comment&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing really to see yet, so let&#39;s move on.&lt;/p&gt;
&lt;p&gt;To handle our line counters, we use the counters (obviously) but we also get some critical help from grid: since we might not have comments, we don&#39;t know whether the line is full. But that&#39;s not a problem with grid - we can just force our counter to always start in the first column&lt;/p&gt;
&lt;style&gt;
.counter {
  grid-column-start: 1;
  counter-increment: algolinecounter;
}

.counter::before {
  content: counter(algolinecounter) &#39;: &#39;;
}
&lt;/style&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.counter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;grid-column-start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;counter-increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; algolinecounter&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.counter::before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;algolinecounter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To try it out, here&#39;s two lines with only the second on having a comment. Again, first as part of the page, then as source.&lt;/p&gt;
&lt;section class=&quot;algorithm&quot;&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div&gt;Content&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div&gt;Content&lt;/div&gt;
&lt;div&gt;Comment&lt;/div&gt;
&lt;/section&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;algorithm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Content&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Content&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Comment&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a good point to think about accessiblity. CSS generated content is of course ok but we might want to add some ARIA attributes to indicate the visual effect of starting a line; then again, maybe that tends to be clear from context and we shouldn&#39;t add noise. It&#39;s tempting to aria-hide the counters and use table roles which would gives AT users the advantage of table walkers - a grid role would be more appropriate but then we&#39;d have to write our own walker so definitely out of scope for a first draft. Anyway, we don&#39;t have to do this right now, we just have to keep it in mind.&lt;/p&gt;
&lt;p&gt;Next up, let&#39;s deal with the other fixed property: comments. This is simple anyway:&lt;/p&gt;
&lt;style&gt;
.comment {
  margin-left: 3em;
}
.comment::before {
  content: &#39;â· &#39;;
}
&lt;/style&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.comment&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 3em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.comment::before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;â· &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This looks nice enough but we should probably hide that from non-visual users. We could indicate that it&#39;s a comment but again it might be enough to grok this from context. After all, context is all we have visually. Let&#39;s take a look, in the page and source:&lt;/p&gt;
&lt;section class=&quot;algorithm&quot;&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div&gt;Content&lt;/div&gt;
&lt;div class=&quot;comment&quot;&gt;Comment, longer&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div&gt;Content&lt;/div&gt;
&lt;div class=&quot;comment&quot;&gt;Comment&lt;/div&gt;
&lt;/section&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;algorithm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Content&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;comment&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Comment, longer&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Content&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;comment&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Comment&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oooh, look at that alignment! Isn&#39;t it pretty?&lt;/p&gt;
&lt;p&gt;So, 9 lines of CSS and our basic layout is done. Nice.&lt;/p&gt;
&lt;p&gt;Since this is a first draft, let&#39;s continue not to over think this. The begin/end routines seem to always have, well, a beginning and an end. So let&#39;s just make that happen.&lt;/p&gt;
&lt;style&gt;
.while::before,
.while::after {
  font-weight: bolder;
}
.while__start::before {
  content: &#39;while &#39;;
}
.while__start::after {
  content: &#39; do&#39;;
}
.while__end::before {
  content: &#39;end while&#39;;
}
&lt;/style&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.while::before,&lt;br /&gt;.while::after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bolder&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.while__start::before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;while &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.while__start::after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; do&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.while__end::before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;end while&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In action and as source:&lt;/p&gt;
&lt;section class=&quot;algorithm&quot;&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;while while__start&quot;&gt;
    Some condition
&lt;/div&gt;
&lt;div class=&quot;comment&quot;&gt;
    Otherwise, we&#39;re done.
&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div&gt;We do some work&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;while while__end&quot;&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;algorithm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;while while__start&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        Some condition&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;comment&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        Otherwise, we&#39;re done.&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;We do some work&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;while while__end&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final piece doesn&#39;t look very nice but neither does the original source.&lt;/p&gt;
&lt;p&gt;There&#39;s a worse glitch though: if you look at the original, the part &amp;quot;inside&amp;quot; the loop is indented. This is slightly tricky since we don&#39;t have a good way of writing a selector for those kinds of elements. Luckily, this is a first draft and we&#39;re lazy, so let&#39;s just add a helper class.&lt;/p&gt;
&lt;style&gt;
.ml1 {
  margin-left: 1em;
}
&lt;/style&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.ml1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Problem solved - let&#39;s have a look:&lt;/p&gt;
&lt;section class=&quot;algorithm&quot;&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;while while__start&quot;&gt;
    Some condition
&lt;/div&gt;
&lt;div class=&quot;comment&quot;&gt;
    Otherwise, we&#39;re done.
&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ml1&quot;&gt;We do some work&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;while while__end&quot;&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;algorithm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;while while__start&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        Some condition&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;comment&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        Otherwise, we&#39;re done.&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ml1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;We do some work&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;while while__end&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moving on to the last issue, nested subroutines, so let&#39;s copy and paste our loop.&lt;/p&gt;
&lt;section class=&quot;algorithm&quot;&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;while while__start&quot;&gt;
    Some condition
&lt;/div&gt;
&lt;div class=&quot;comment&quot;&gt;
    Otherwise, we&#39;re done.
&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;while while__start&quot;&gt;
    Some condition
&lt;/div&gt;
&lt;div class=&quot;comment&quot;&gt;
    Otherwise, we&#39;re done.
&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ml1&quot;&gt;We do some work&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;while while__end&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;while while__end&quot;&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;algorithm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;while while__start&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        Some condition&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;comment&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        Otherwise, we&#39;re done.&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;while while__start&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        Some condition&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;comment&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        Otherwise, we&#39;re done.&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ml1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;We do some work&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;while while__end&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;while while__end&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But of course now we have the same margin problem all over again, so we don&#39;t think too hard and add another helper.&lt;/p&gt;
&lt;style&gt;
.ml2 {
  margin-left: 2em;
}
&lt;/style&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.ml2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 2em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can make it:&lt;/p&gt;
&lt;section class=&quot;algorithm&quot;&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;while while__start&quot;&gt;
    Some condition
&lt;/div&gt;
&lt;div class=&quot;comment&quot;&gt;
    Otherwise, we&#39;re done.
&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ml1 while while__start&quot;&gt;
    Some condition
&lt;/div&gt;
&lt;div class=&quot;comment&quot;&gt;
    Otherwise, we&#39;re done.
&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ml2&quot;&gt;We do some work&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ml1 while while__end&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;while while__end&quot;&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;algorithm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;while while__start&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        Some condition&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;comment&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        Otherwise, we&#39;re done.&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ml1 while while__start&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        Some condition&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;comment&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        Otherwise, we&#39;re done.&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ml2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;We do some work&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ml1 while while__end&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;while while__end&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, it&#39;s clear that we have a lurking problem but luckily this was just a first draft and we can finish our example. Let&#39;s just add a procedure class as follows.&lt;/p&gt;
&lt;style&gt;
.procedure::before {
  font-weight: bolder;
}
.procedure__start::before {
  content: &#39;procedure &#39;;
}
.procedure__end::before {
  content: &#39;end procedure&#39;;
}
&lt;/style&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.procedure::before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bolder&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.procedure__start::before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;procedure &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.procedure__end::before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;end procedure&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it looks like we&#39;re there.&lt;/p&gt;
&lt;section class=&quot;algorithm&quot;&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;procedure procedure__start&quot;&gt;
    &lt;span class=&quot;sc&quot;&gt;Euclid&lt;/span&gt;(&lt;i&gt;a, b&lt;/i&gt;)
&lt;/div&gt;
&lt;div class=&quot;comment&quot;&gt;
    The g.c.d. of &lt;i&gt;a&lt;/i&gt; and &lt;i&gt;b&lt;/i&gt;
&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;state ml1&quot;&gt;&lt;i&gt;r â a &lt;/i&gt;mod&lt;i&gt; b&lt;/i&gt;&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;while while__start ml1&quot;&gt;
    &lt;i&gt;r â  &lt;/i&gt;0
&lt;/div&gt;
&lt;div class=&quot;comment&quot;&gt;
    We have the answer if &lt;i&gt;r&lt;/i&gt; is 0
&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ml2&quot;&gt;&lt;i&gt;a â b&lt;/i&gt;&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;state ml2&quot;&gt;&lt;i&gt;b â r&lt;/i&gt;&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ml2&quot;&gt;&lt;i&gt;r â a &lt;/i&gt;mod&lt;i&gt; b&lt;/i&gt;&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;while while__end  ml1&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ml1&quot;&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;i&gt;b&lt;/i&gt;&lt;/div&gt;
&lt;div role=&quot;region&quot; aria-label=&quot;comment&quot; class=&quot;comment&quot;&gt;
    The gcd is &lt;i&gt;b&lt;/i&gt;
&lt;/div&gt;
&lt;div role=&quot;region&quot; aria-label=&quot;line&quot; class=&quot;counter&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;procedure procedure__end&quot;&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;algorithm&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;procedure procedure__start&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;sc&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Euclid&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;a, b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;)&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;comment&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    The g.c.d. of &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;a&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;state ml1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;r â a &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;mod&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;while while__start ml1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;r â  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;0&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;comment&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    We have the answer if &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;r&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; is 0&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ml2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;a â b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;state ml2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;b â r&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ml2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;r â a &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;mod&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;while while__end  ml1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ml1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;strong&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;return&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;strong&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;region&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-label&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;comment&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;comment&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    The gcd is &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;b&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;region&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-label&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;procedure procedure__end&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Coda Part 2.&lt;/h3&gt;
&lt;p&gt;Not bad for a first draft. Grid makes so many things just easy, sprinkle some counters.&lt;/p&gt;
&lt;p&gt;There are a couple of glaring issues at this point&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;those helper classes feel like content conversion. Can we do better?&lt;/li&gt;
&lt;li&gt;grid soup - could subroutines be wrapped in a single element?&lt;/li&gt;
&lt;li&gt;responsivity - scrolling is not awesome.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inevitably, these will lead us into the weeds. But at least the web&#39;s weeds.&lt;/p&gt;
&lt;h2&gt;Part 3. But what is it&lt;/h2&gt;
&lt;p&gt;Let&#39;s go back to our starting point.&lt;/p&gt;
&lt;img src=&quot;https://www.peterkrautzberger.org/assets/2020/euclid.png&quot; alt=&quot;Euclid&#39;s algorithm typeset using LaTeX&#39;s algorithmicx package&quot; /&gt;
&lt;p&gt;In Part 1, I started at the wrong end, if you will: I looked at a TeX source and then at existing solutions that aim to stay close to print, both in authoring &amp;quot;convenience&amp;quot; and layout design. In Part 2, I went through a rought draft of realizing a simlar layout in CSS &amp;quot;properly&amp;quot;.&lt;/p&gt;
&lt;p&gt;Now, let&#39;s try to let go.&lt;/p&gt;
&lt;h3&gt;Forget the source, Luke.&lt;/h3&gt;
&lt;p&gt;What can we observe for this layout?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a title&lt;/li&gt;
&lt;li&gt;a bunch of numbered lines&lt;/li&gt;
&lt;li&gt;containing three distinct parts per line - counter, main block, comment block&lt;/li&gt;
&lt;li&gt;indentation where subgroups of lines have their main blocks indented&lt;/li&gt;
&lt;li&gt;some bold key words that match those subgroups&lt;/li&gt;
&lt;li&gt;some decorative top/bottom borders around the title and whole algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first draft was trying to be so minimalistic that it skipped on the two primary semantic pieces: lines and subgroups of lines. Isn&#39;t that odd?&lt;/p&gt;
&lt;p&gt;So thinking about those two, where would we start?&lt;/p&gt;
&lt;h3&gt;Authoring with batteries included&lt;/h3&gt;
&lt;p&gt;There are a couple of conveniences when it comes to authoring that I&#39;d like to see preserved. The core problem is change: removing and injecting content into other content. You want it to magically work and of course it often doesn&#39;t. In particular &lt;strong&gt;copy&amp;amp;paste&lt;/strong&gt; is a key usability challenge that good authoring tools try to solve. Obviously, this is is a hard problem in general.&lt;/p&gt;
&lt;p&gt;It also leads to other factors such as good (automated) default behavior alongside customizability aka &amp;quot;macros&amp;quot;.&lt;/p&gt;
&lt;p&gt;The first challenge from the first draft is: how do we solve the indentation problem, i.e., how can we avoid the &lt;code&gt;.ml1&lt;/code&gt;, &lt;code&gt;.ml2&lt;/code&gt; etc classes. Because if we cannot solve that, authors will have to a) add those classes themselves and b) update them whenever they move or add something to an existing structure.&lt;/p&gt;
&lt;h3&gt;Coda&lt;/h3&gt;
&lt;p&gt;This coda marks where the &amp;quot;original&amp;quot; draft ended, i.e, the draft from which I started in June 2022 (though many edits were done in June / July 2022). Handling the indentation is really the only &amp;quot;hard&amp;quot; problem for this layout so I&#39;m not sure why I stopped here.&lt;/p&gt;
&lt;p&gt;I have a couple of codepens from that time that might be worth writing about. And then there&#39;s the solution I adopted at work to talk about (which, inevitably, is different). Let&#39;s stop here and see if I get around to those updates.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Thoughts on Print Equation Layout</title>
		<link href="https://www.peterkrautzberger.org/0218/"/>
		<updated>2022-09-17T00:00:00Z</updated>
		<id>https://www.peterkrautzberger.org/0218/</id>
		<content type="html">&lt;p&gt;This will possibly be another piece that will get updates in the future. Actually, I hope not but we&#39;ll see. This, above all, is for me. For me to gather my thoughts one (hopefully) last time. For me to deal with stupid garbage which has accumulated over the years. As for you, dear reader, I don&#39;t know if this is for you. I didn&#39;t write it for the handful of experts in this area; maybe for someone like my former self, back when I started writing mathematics on the web. Maybe for someone who knows the web and wonders what all that fuss with equations is always about. In any case here&#39;s a fair warning: I&#39;m not going into every detail so if I lose you along the way, remember these first few lines and go do something more fun, it&#39;s fine. Just don&#39;t be that guy (and it&#39;s invariably a guy) complaining about free stuff on the internet.&lt;/p&gt;
&lt;p&gt;This is also a lamentation. Nothing I write will change anything of what&#39;s to come. It is also (hopefully) a bit of mental cleansing. A few years ago I had strong burn-out symptoms due to working in this (as it turned out toxic) field. It takes a lot of effort for me to not be dragged down again. But one last time I want to try to write up where I&#39;ve arrived after thinking about equation layout on the web for over 10 years now.&lt;/p&gt;
&lt;p&gt;If I make a claim without substantiating links, it&#39;s most likely to avoid more burn out; you can ping me privately though. If I&#39;m giving just one or two examples, it&#39;s not because that&#39;s it but because this piece is very long already. [If you want deeply detailed research results, feel free to contact my company - we do that kind of thing.]&lt;/p&gt;
&lt;p&gt;Finally, I thank the kind people who read this piece before I pushed it live - your feedback was invaluable; I owe you one.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;10 years ago I joined the &lt;a href=&quot;https://www.mathjax.org/&quot;&gt;MathJax project&lt;/a&gt; which forced me to think a lot about how to put equations on web pages. Actually, I had already spent quite a bit of time during my PhD and postdoc years thinking (*cough* procrastinating) about the same thing, albeit from a different perspective.&lt;/p&gt;
&lt;p&gt;When I started writing on the web all 13 years ago, I quickly went through a phase I&#39;ve seen repeated by many people since:&lt;/p&gt;
&lt;p&gt;&amp;quot;oh, there&#39;s something called MathML, I should use that&amp;quot;&lt;/p&gt;
&lt;p&gt;followed by&lt;/p&gt;
&lt;p&gt;&amp;quot;oh this does not work at all, let&#39;s not use that&amp;quot;,&lt;/p&gt;
&lt;p&gt;usually followed by choosing jsMath (if you&#39;re old enough) and later MathJax because they ultimately remain - by far - the best tools for the job.&lt;/p&gt;
&lt;p&gt;After joining MathJax, my job was to profess the prowess of (read:blindly advertise for) MathML, so I did. That was largely because MathJax was formally part of Design Science at the time and they made money with MathML. Luckily, the project moved to the AMS where we could think about things more freely.&lt;/p&gt;
&lt;p&gt;When the whole Chrome 24 debacle happened, there was this one comment from a Googler (on Google+, naturally you might say). I can&#39;t find it anymore but what I recall them saying is: &amp;quot;maybe it&#39;s a good format but still a bad format for the web&amp;quot;. I kept coming back to that thought for a few years and, eventually, came to agree with it. (This piece is basically summarizing that.)&lt;/p&gt;
&lt;p&gt;In short, I realized that MathML is fundamentally a useful XML print publishing tool but a bad technology for the web. So I tried to pivot MathJax away from MathML and its toxic community towards actual web standards and their underlying principles. We wrote a whitepaper, got our sponsors on board, and started work on MathJax v3. (This is not what v3 became but that&#39;s ok. I left my position at MathJax around the first beta which was a thrill and I&#39;m grateful that Davide and Volker enabled me to leave with that big leap forward having begun.)&lt;/p&gt;
&lt;p&gt;Towards the end of that period, I wrote a number of pieces here, outlining MathML&#39;s many flaws and failures. But as I kept writing: it&#39;s not MathML&#39;s fault. MathML does what it&#39;s supposed to; but what it&#39;s supposed to do is a bad fit for the web. (Again, this piece is basically re-iterating those pieces. What do you expect from a recovering academic.)&lt;/p&gt;
&lt;p&gt;In the past 5 years, I&#39;ve worked primarily on the issue of converting full mathematical (LaTeX) documents to web formats. If you follow me on the fediverse, you may have seen me use the CW &amp;quot;TeX in real world production&amp;quot; sharing some of the &amp;quot;gems&amp;quot; from this experience.&lt;/p&gt;
&lt;p&gt;All of this has led me to realize that there&#39;s a &amp;quot;deeper&amp;quot; problem and I feel like it needs a (sort of) new name: print equation layout.&lt;/p&gt;
&lt;h2&gt;Framing&lt;/h2&gt;
&lt;p&gt;Framing is important. What I call &amp;quot;print equation layout&amp;quot; is more frequently called &amp;quot;math layout&amp;quot;, &amp;quot;formula layout&amp;quot;, or just &amp;quot;math&amp;quot; (I find that last one somewhat insulting). The phrase &amp;quot;print equation layout&amp;quot; may seem unnecessary or convoluted. To some degree, I agree. For example, I don&#39;t believe we have seen &amp;quot;web equation layout&amp;quot; come into existence during these first 30 years of the web. Nor, sadly, do I expect to see it in the next 10.&lt;/p&gt;
&lt;p&gt;But as a framing device &amp;quot;print equation layout&amp;quot; serves to ground the conversation and keep aspects in focus that I find critical to many discussions.&lt;/p&gt;
&lt;p&gt;In my opinion, print equation layout is, ultimately, a flawed print tradition that web technology should not have to make extra efforts to support (e.g., as proposed by MathML&#39;s addition to HTML5 way back when). The layout features are largely archaic with very few actual challenges remaining in the context of contemporary (2022) web layout.&lt;/p&gt;
&lt;p&gt;Furthermore, print equation layout is fundamentally inaccessible in the sense of web accessibility. However - and this is where this part gets very tricky - print accessibility traditions for print equation layout do exist (at least in the US as well as a few other countries and of course the US perspective always dominates these conversations). This may seem like a contradiction - how can there be an accessibility tradition that is bad in the context of the web - but it is really no different from the visual layout traditions.&lt;/p&gt;
&lt;p&gt;This is a key complication in the discussions (and myths) around this topic: because print layout and print accessibility traditions exist, people assume that they must be realized on the web - and in the same way.&lt;/p&gt;
&lt;p&gt;I want to argue that neither aspect of print equation layout - visual layout traditions and accessibility traditions - is particularly good or useful &lt;em&gt;on the web&lt;/em&gt;. As a result, it is a particularly problematic set of techniques because the contemporary web already has plenty of good and useful features that solve print equation layout.&lt;/p&gt;
&lt;p&gt;Adding an additional, separate feature layer for a problematic print technology tradition does not make any sense, in fact it has a (by now long) history of hurting the community.&lt;/p&gt;
&lt;h3&gt;Interlude&lt;/h3&gt;
&lt;p&gt;In TeX, we can put punctuation after a table. In HTML, we cannot. Should HTML change because this print tradition exists?&lt;/p&gt;
&lt;h2&gt;What&#39;s in a word&lt;/h2&gt;
&lt;p&gt;Let&#39;s try to be a bit more specific.&lt;/p&gt;
&lt;p&gt;Print equation layout is...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what people think of when you say &amp;quot;math/formula/equation&amp;quot;   // what  MathML partially captures   // what math mode TeX usually produces  // what MS Word formulas usually look like&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;an elaborate, two-dimensional form of abbreviated notation for compressed, highly complex, context dependent, abstract thought.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&#39;s a bit of a mouthful, I know. But, in the spirit of recursion, this compressed, complex description captures the essential problems well and much follows easily from it.&lt;/p&gt;
&lt;p&gt;This is also not an observation of edge cases, it holds at an elementary level, e.g., in the shape of long addition/multiplication/division or &amp;quot;explanatory&amp;quot; annotated layout in school-level material. At the research level, things are much (much) worse, because research by its nature invents new concepts but more so because especially compression was exacerbated by the content explosion of the 20th century, combined with print page limits.&lt;/p&gt;
&lt;p&gt;A first consequence of this description is that print equation layout is highly ambiguous because the compression is very lossy. What&#39;s worse is that print equation layout not just needs context but is frequently integrated into other complex notation (e.g., text annotation or graphical documents).&lt;/p&gt;
&lt;p&gt;A consequence of this is that it is &amp;quot;non-text content&amp;quot; (in the sense of WCAG SC 1.1.1). It is much closer to &amp;quot;ascii art&amp;quot; than HTML traditions of &amp;quot;semantic markup&amp;quot; with concepts such as heading, landmark, or widget.&lt;/p&gt;
&lt;p&gt;Naturally, this does not apply to all instances of print equation layout. It crucially applies where the actual problems occur - both in visual and non-visual rendering. The problem is not to handle 1+1=2 (well, actually we&#39;ll get back to this), the problem is more like:&lt;/p&gt;
&lt;tex-block&gt;\det(A)=\sum _{\begin{array}{c}k_{1},k_{2},\ldots ,k_{n}\geq 0\\ k_{1}+2k_{2}+\cdots +nk_{n}=n\end{array}}\prod _{l=1}^{n}{\frac {(-1)^{k_{l}+1}}{l^{k_{l}}k_{l}!}}\operatorname {tr} \left(A^{l}\right)^{k_{l}}
&lt;/tex-block&gt;&lt;p&gt;This is a simple piece of print equation layout, something from the first few months at university. And it is packed.&lt;/p&gt;
&lt;h3&gt;interlude&lt;/h3&gt;
&lt;p&gt;Cars are a bad technology.&lt;/p&gt;
&lt;p&gt;They need massive resources to build, most use fossil fuel to run, all need massive infrastructure, destroying our habitat; they are vastly inefficient, they stress people out, they fill our streets and sidewalks with megatons of metallic monstrosities.&lt;/p&gt;
&lt;p&gt;And yet most people own one or want to own one. They have their uses, some at which they excel. So they&#39;re here and we need to think about them.&lt;/p&gt;
&lt;p&gt;But that doesn&#39;t change the fact that we should think about a world without cars because it could really be a much better world for everyone. And we shouldn&#39;t insist to keep building our world around cars or make cars a core assumption in our &amp;quot;cultural stack&amp;quot;.&lt;/p&gt;
&lt;p&gt;The same holds true for print equation layout.&lt;/p&gt;
&lt;h2&gt;Visual print equation layout on the web&lt;/h2&gt;
&lt;h3&gt;practically&lt;/h3&gt;
&lt;p&gt;The problem of realizing print equation layout on the web has been solved for almost two decades now. Well, 18 years to be exact.&lt;/p&gt;
&lt;p&gt;Let that sink in for a bit. 18! years!&lt;/p&gt;
&lt;p&gt;With CSS, this solution started as (client-side) JS only and span soup; we have had that since 2004 (via &lt;a href=&quot;https://www.math.union.edu/~dpvc/jsMath/&quot;&gt;jsmath&lt;/a&gt;, MathJax&#39;s precursor).&lt;/p&gt;
&lt;p&gt;With SVG, we&#39;ve had this since 2011. MathJax v2, at first client-side but quickly also server-side (via phantomjs and later via nodejs). [To some degree, various tools could produce SVG from, e.g., TeX, even earlier that but they didn&#39;t generally care about the web as a use case, e.g., they wouldn&#39;t give you good vertical alignment to meet a baseline.]&lt;/p&gt;
&lt;p&gt;It has been possible to realize print equation layout with just CSS (e.g., server-side generated span soup and CSS) since IE8 - IE8 dammit, released in 2009 - and with just SVG since IE9 (2011). [To be fair, MathJax was not the first to realize such a CSS approach, KaTeX was, but one of my favorite successes while at MathJax was to prod Davide long enough about a &amp;quot;fast Preview without JS&amp;quot; that he built the &amp;quot;CommonHTML&amp;quot; output for v2.7 which added this. I&#39;m also still fond of the previewHTML output which preceded it and traded beauty for CSS simplicity.]&lt;/p&gt;
&lt;p&gt;Visual print equation layout has been solved thrice over with a myriad of smaller and larger tools doing it in varying ways, balancing code simplicity with quality of layout. (mathquill, jqmath, math-ml etc)&lt;/p&gt;
&lt;p&gt;[Aside. This is why a certain blog post from a few years ago about &amp;quot;alternate timelines&amp;quot; was so very much off base - CSS driven print equation layout was first, SVG a close second, not some XML dialect nobody was using for anything but print production. (And no, IE plugins do not count in my book.) In the similar situations the same people would (indeed did famously) argue that working solutions should be considered the prime candidates to move standardization forward, not some contrived academic proposal. But I digress.]&lt;/p&gt;
&lt;p&gt;So print equation layout solutions for the web have existed for a long time.&lt;/p&gt;
&lt;p&gt;Are they perfect? No.&lt;/p&gt;
&lt;p&gt;Are they still getting better? Emphatically yes - all the time. The ever evolving CSS continues to make things easier (grids, container queries, variable fonts, layers!). SVG is just rock solid (for these purposes; and it improves, too).&lt;/p&gt;
&lt;p&gt;The most significant CSS challenge at this point are stretchy character constructions - not a massive problem and one that could (and should) be solved independently of any &amp;quot;mathematical&amp;quot; considerations since stretchy constructions are frequently used in other design scenarios (e.g., stretchy braces around lists are pretty common design patterns).&lt;/p&gt;
&lt;p&gt;In the nice-to-have category, I&#39;d place better control over glyph bounding boxes. Right now, high quality print equation layout realized with CSS depends on webfonts. This is not a particularly critical consideration in my book - much high quality text layout on the web relies on webfonts - and the bounding box problem also needs a more general solution (and in fact there are proposals for better access to font internals).&lt;/p&gt;
&lt;p&gt;Some people argue that the CSS and SVG layout solutions like MathJax generate &amp;quot;convoluted&amp;quot; markup output. This is a red herring.&lt;/p&gt;
&lt;p&gt;On the on hand, convoluted XML is not &amp;quot;better&amp;quot; if it says &amp;quot;math&amp;quot; in it. On the other hand, nobody from CSS or SVG (spec) land has ever tried to help so tools in this space make do with what they can find. My favorite comparison for web people is: the output looks a lot like Bootstrap&#39;s grid layout in its early days (somewhat convoluted) or an accessible datepicker markup today (extremely convoluted). In other words: it looks the way it looks to get the job done with the tools available. And it does. And it gets simpler every year.&lt;/p&gt;
&lt;p&gt;If print equation layout tools for the web were heard the same way grid frameworks were heard way back when, we might get simpler output even quicker &lt;em&gt;and&lt;/em&gt; in a way that benefits the entire web stack. In a world of div-soup SPA&#39;s I think the &amp;quot;ugly output&amp;quot; argument is entirely a red herring.&lt;/p&gt;
&lt;h4&gt;interlude&lt;/h4&gt;
&lt;p&gt;From &lt;a href=&quot;http://archive.computerhistory.org/resources/text/Oral_History/Lampson_Butler/102658024.05.01.pdf&quot;&gt;Oral History of Butler Lampson (Interviewed by:&lt;br /&gt;
Alan Kay)&lt;/a&gt; (via &lt;a href=&quot;https://www.robinsloan.com/newsletters/super-sweet-spots/&quot;&gt;Robin Sloan&#39;s newsletter&lt;/a&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Alan Kay: But I wish that you had been at CERN on a sabbatical when [the Web was being born].&lt;/p&gt;
&lt;p&gt;Butler Lampson: I probably would have been a disaster.&lt;/p&gt;
&lt;p&gt;Kay: I donât know. But I think you would have made a slightly betterââ¦&lt;/p&gt;
&lt;p&gt;Lampson: No. No. No. No. No. No. What Tim [Berners-Lee] did was perfect. My view about the web is that itâs the great failure of computer systems research. Why did computer systems researchers not invent the web? And I can tell you the answer. Itâs because itâs too simple.&lt;/p&gt;
&lt;p&gt;Kay: It is too simple.&lt;/p&gt;
&lt;p&gt;Lampson: If I had been there I would have mucked it up. I swear to God. The idea that youâre going to make a new TCP connection for every mouse click on a link? Madness! The idea that youâre going to have this crusty universal data type called HTML with all those stupid angle brackets? We never would have done that! But those were the things that allowed it to succeed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;theoretically&lt;/h3&gt;
&lt;p&gt;Ultimately, the problem is: is this layout tradition a good fit for the web platform? Take table layout. At first people thought it was a good fit. Now we don&#39;t.&lt;/p&gt;
&lt;p&gt;I think print equation layout is a thoroughly bad fit, building it into the web actually damages the platform, just like tables have taken two decades to become unscrewed (oh hi Google, still using tables for layout in some products).&lt;/p&gt;
&lt;p&gt;Even for the simplest examples we run into &amp;quot;fun&amp;quot; print equation layout traditions that are problematic. The easiest to understand are the many text-dependent behaviors, i.e., layout behavior that changes depending on the specific text nodes present (beyond the obvious layout changes from having different text nodes).&lt;/p&gt;
&lt;p&gt;The simplest example is probably: single letter variables are italic, multi-letter ones are upright. This is pure tradition, i.e., something a lot of people like to do. Obviously people sometimes don&#39;t do this. Obviously, there&#39;s no technical difficulty to make this happen as an author / authoring tool on the web today. But as a feature for the web it is weirdly different from any CSS/text rendering features we have; that&#39;s just not how styling text works.&lt;/p&gt;
&lt;p&gt;A more complex example are moveable limits. For example the TeX expression &lt;code&gt;\sum_{i=0}^\infty&lt;/code&gt; would, at plain view, indicate we get a summation symbol with a subscript of &amp;quot;i=0&amp;quot; and a superscript of infinty.&lt;/p&gt;
&lt;p&gt;However, this depends. As an inline expression, TeX will lay this out as I just described.&lt;/p&gt;
&lt;p&gt;&lt;tex-inline&gt;\sum_{i=0}^\infty&lt;/tex-inline&gt;&lt;/p&gt;
&lt;p&gt;However, as a display/block expression, the sub- and superscripts will become under- and overscripts.&lt;/p&gt;
&lt;tex-block&gt;\sum_{i=0}^\infty
&lt;/tex-block&gt;&lt;p&gt;Most print equation layout systems have similar mechanics. This is of course convenient from an authoring perspective - you can switch modes as you like, thus macros or copy&amp;amp;paste are much easier to do.&lt;/p&gt;
&lt;p&gt;However, from a web design perspective it is a wild thing. Not the change as such (of course children change when a container switches from inline to block). But when you replace &lt;code&gt;\sum&lt;/code&gt; with something else (say an &amp;quot;S&amp;quot; for &amp;quot;sum&amp;quot;), you will suddenly not get this behavior anymore. It&#39;s driven by (an allow list of) text nodes.&lt;/p&gt;
&lt;p&gt;From a layout perspective, this automatism wouldn&#39;t have to be builtin - you have to have tooling to specify both layouts anyway - yet MathML, as a print equation layout system, builds it in. This means, we have intentionally ambiguous layout instructions that change rendering depending on text content. This very weird from the perspective text layout on today&#39;s web.&lt;/p&gt;
&lt;p&gt;From this we can take a step up and talk about the operator dictionary. Remember when I spoke about 1+1=2 not being the hard problem. Guess again, we made it hard!&lt;/p&gt;
&lt;p&gt;[I mean, what do you expect? There&#39;s a reason why &lt;a href=&quot;https://knowyourmeme.com/memes/zach-galifianakis-math&quot;&gt;movies&lt;/a&gt; will visually indicate something is difficult beyond comprehension by showing print equations layouts; even &lt;a href=&quot;https://knowyourmeme.com/memes/math-lady-confused-lady&quot;&gt;memes about confusion&lt;/a&gt; get more popular when you add equations to!]&lt;/p&gt;
&lt;p&gt;Naturally, there are traditions around how you space things. 1+1=2? 1+1 = 2? 1 + 1 = 2? Or something more subtle? There are many traditions like this, the most well known being Donald Knuth&#39;s as captured in the TeX book.&lt;/p&gt;
&lt;p&gt;But that&#39;s just it - they are traditions. Traditions, based on &lt;a href=&quot;https://www.ams.org/journals/bull/1979-01-02/S0273-0979-1979-14598-1/&quot;&gt;Knuth&#39;s review&lt;/a&gt; of Western (and mostly English language) publications from the late 19th and 20th century.&lt;/p&gt;
&lt;p&gt;And people can, do, and should deviate from traditions. If there&#39;s one thing I&#39;ve learned working in mathematical publishing production, it&#39;s that authors are full of ideas for how these traditions should change (most are bad, some are genuinely good, sometimes the worst ones are the best).&lt;/p&gt;
&lt;p&gt;I mean, look at &lt;a href=&quot;https://londmathsoc.onlinelibrary.wiley.com/doi/10.1112/jlms/19.73_Part_1.28&quot;&gt;this weird theorem layout from 1940&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.peterkrautzberger.org/assets/2022/LMS_theorem.png&quot; alt=&quot;screenshot of a theorem statement, spliting up lines into sublines to give simultaneous statements of multiple cases&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Thank goodness that style didn&#39;t catch on.&lt;/p&gt;
&lt;p&gt;Instead of giving them the tools that allow adjustments, most print equation layout systems (and MathML in particular), only hand them spacing hacks. This may be fine for print where, in the end, you just want to put some ink on a canvas and no one can see your hackery. On the web, the structural damage is apparent and causes numerous issues (e.g., performance, accessibility). Compare this to CSS where we have benefited from a system that allows resets and customization clearly and cleanly; in comparison, a paradise of tools for designers, authors, and developers.&lt;/p&gt;
&lt;p&gt;None of this is to say that there aren&#39;t interesting aspects of print equation layout that are worth a look for the web; something as basic as multiscripts or something as complex as stretchy glyphs. But bringing them in a way that drags the baggage of 100 years of print equation layout along is an obviously stupid idea (that can be explained but hardly forgiven).&lt;/p&gt;
&lt;p&gt;Stretchy characters are also a weirdly terrible tradition: to stitch together glyph pieces to form something else. Of course it makes sense in a print setting - you work with what you got (just like you re-use typefaces left right and center). But what do people use stretchy character for? It is actually a very simple concept: a border. Yes, the specifics of the border style may carry some (contextual) meaning, but that&#39;s the case with most borders in general. The main layout purpose is very specifically to separate a chunk of layout that benefits from a border on some sides of its box. That&#39;s all there is to it. It&#39;s even in the name: these constructions are commonly called &amp;quot;fences&amp;quot; (mathml 3 even has an &lt;code&gt;mfenced&lt;/code&gt; element, may it rest in pieces). A fence is a separator (ARIA pun intended), something to mark a border.&lt;/p&gt;
&lt;p&gt;The MathML people want the ability to build stretchy characters to be limited to internal magic of MathML implementations in browsers, relying on low-level access to Open Type MATH tables without doing the hard work of surfacing this complex technology to userland. This technology has a somewhat problematic history in itself. The extension was developed by Microsoft exclusively for Word and only years later proposed to Open Type properly to help, really, the MathML people to make the case that &amp;quot;it&#39;s a standard&amp;quot;. There are only a handful of fonts with MATH tables around because they are quite complex (read: expensive) to create.&lt;/p&gt;
&lt;p&gt;Even ignoring the troublesome history, this approach limits a rather lovely concept used throughout design (just search dribble or codepen for curly braces) to supposedly &amp;quot;mathematical&amp;quot; markup and layout. It is quite silly especially since even basic uses case won&#39;t actually be possible this way (e.g., a stretchy brace around a list would still be invalid,  even ignoring &amp;quot;semantics&amp;quot;). Any which way, we still need an alternative.&lt;/p&gt;
&lt;p&gt;So why not rethink this in the context of the web? Why carry over a silly tradition (which is actually even worse: fonts will have multiple sizes of fences and those will be used if the box they wrap around is small enough). We have so many useful ways to indicate that something is grouped together on the web, we have traditions around those too (e.g., hover, focus, target effects, easily shaded or animated backgrounds to indicate depth), some of which are problematic for other reasons. We have a dynamic medium that allows you to only expose the gnarly information like this when a user actually requires it instead of on-the-nose all the time. We can also leverage the web&#39;s infinite canvas to build new traditions that serve users better. For example, stretchy braces do not increase by just nesting. They stretch only to match the contents, thus in a double parentheses situation (like &lt;code&gt;((...)+(...))&lt;/code&gt;) they will not grow, thus not actually represent the full complexity. That&#39;s understandable in the limited, fixed page sizes of print products. It also forces authors to do silly hacks to get additional dimensions should they want to communicate differently than tradition allows for. Maybe authors on the web want to do things differently from the web?&lt;/p&gt;
&lt;p&gt;And of course it&#39;s funny how even if you insist on a fonts-based alternative there&#39;s already a solid alternative to build upon today: variable fonts can do wonderful stretchy things and can obviously solve this problem. Just without magic and with control in the hands of authors.&lt;/p&gt;
&lt;p&gt;If you move away from the silliness that you need to reproduce print tradition, you&#39;ll find that you can solve more problems. For example, &lt;a href=&quot;https://www.peterkrautzberger.org/0204/&quot;&gt;asymmetrical or partially colored stretchy constructions&lt;/a&gt;. It&#39;s perfectly reasonable to have a &lt;code&gt;\begin{cases}&lt;/code&gt; environment but want the part before it on the same line as the first case. You can&#39;t do that with Open Type MATH tables. You can &lt;a href=&quot;https://tex.stackexchange.com/questions/226155/a-curly-brace-with-an-asymmetric-cusp/226162&quot;&gt;hardly do it in TeX&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The operator dictionary is another good example for this. Doing layout based on text content is an interesting topic - we&#39;ve had years of debates around aligning table cells at decimals. For trivial spacing changes around elements - which authors want to customize anyway - it seems just a bit silly.&lt;/p&gt;
&lt;p&gt;As related and similarly bad example are &lt;a href=&quot;https://en.wikipedia.org/wiki/Mathematical_Alphanumeric_Symbols&quot;&gt;math alphabets&lt;/a&gt;. They are pretty mad to begin with; they are fontface traditions, captured as Unicode codepoints. It&#39;s understandable that mathematical writing and print traditions have abused fontfaces - it was a nice hack when all you have is moveable type. Enshrining them in Unicode does make some sense for print because (in a twist that should not be a surprise) it turns out that these glyphs have grown their own requirements. For example, Greek character glyphs tend to need special shapes for mathematical context than for Greek texts. In the mash up of technology limitations that is print equation layout these glyphs serve contradicting roles: be identifiably different but fit nicely with the Latin glyphs. This leads to really weird design quirks, see for example &lt;a href=&quot;https://read.somethingorotherwhatever.com/entry/Haralambous1999&quot;&gt;From Unicode to Typography, a Case Study: the Greek Script&amp;quot; by Yannis Haralambous&lt;/a&gt; (tip of the hat to Christian&#39;s wonderful Interesting Esoterica).&lt;/p&gt;
&lt;p&gt;The recent addition of math calligraphic scripts to unicode (while unsurprising given the people involved) is weird to me because authors will not and do not stop. The other day, we had a paper with runes come through production. Should they add &amp;quot;math runes&amp;quot; to Unicode next? And what about &lt;a href=&quot;https://github.com/stipub/stixfonts/issues/221&quot;&gt;David Griffith&#39;s script r&lt;/a&gt;, does he get a codepoint all for himself? What about math emoji? Also, what about math alphabets when they&#39;re in text mode - do they have special meaning, too? (Other than making horribly inaccessible social media profiles, that is.) More seriously, I&#39;m not aware of any discussion of how the math alphabets are purely focused on supporting authors using the Latin alphabet. For lack of expertise, I have not written about non-European print equation layout traditions because I know next to nothing of them but from the little I know (e.g. the ancient W3C note on Arabic mathematical notation) I suspect they might make for an interesting post-colonialism study. [Aside, there is a direction where I could see Unicode actually help, just like it does with emoji: codepoints for actual mathematical concepts that are usually represented as a single grapheme. Indeed, the history of some math alphabets hints at this, e.g., the few &lt;a href=&quot;https://en.wikipedia.org/wiki/Blackboard_bold&quot;&gt;blackboard bold&lt;/a&gt; symbols that are in the Basic Multilingual Plane. Just like we have a heart and a heart as card deck suit.]&lt;/p&gt;
&lt;p&gt;It is worthwhile to note at this point that in recent years more and more TeX users (including the AMS) have been leveraging a re-interpretation of Knuth&#39;s rulesets by adopting xelatex which realizes equation layout using Open Type MATH Table fonts which, again, was designed for Microsoft Word when they built their print equation layout facilities alongside a first font from Tiro. While Microsoft and Tiro followed the TeX book there are noticeable differences, making it hard to know if the bug is in the font, in MS Word, or in xelatex.&lt;/p&gt;
&lt;p&gt;On a slightly higher level, we have traditions such as labeled equations. They are surprisingly complicated in themselves. For example, most systems will provide authors flexibility in aligning or auto-numbering them, they may be mixed with other constructs (such as stretchy characters, e.g., in the LaTeX package cases or empheq). In some print equation layout systems they&#39;ll be realized via table-like constructs, in some via lower level primitives (horizontal fills, floats etc).&lt;/p&gt;
&lt;p&gt;It also gets complex when you look to integrate equations into surrounding content. Print (equation) layout systems tend to treat equation layout as starting an entirely different context; the break is fairly absolute, both for inline and block layout (albeit in different ways). This doesn&#39;t fit well with the web&#39;s DOM and CSS&#39;s box model however. For example, equations tend to have break out of all context and align to some global property, in particular their labels. So a block equation in a list will simply break out of everything and potentially place a label at a far end of the line. This fits very badly into the web&#39;s layout model(s).&lt;/p&gt;
&lt;p&gt;Next step up you&#39;ll find alignment across equations. A common feature in print layout engines with equation support (e.g., amsmath&#39;s intertext). Should we enable these kinds of traditions? Maybe; I do think this last one is fascinating. Should we do it by replicating print (equation) layout traditions? That sounds rather ludicrous to me.&lt;/p&gt;
&lt;p&gt;Another problematic print tradition lies in inheritance. Traditionally, print equation layout will work as a reset. E.g., in TeX math mode will not inherit surrounding text styles or weight. Why? Well, because that would change the &amp;quot;meaning&amp;quot; because you&#39;re abusing style and weight: if you use a normal V and a bold V for two different concepts, then naturally in a bold heading you&#39;ll run into trouble. On the web, we see other traditions to surface; for example, people find it very irritating if a fraction is not bold inside a heading. A very real problem happens if a link starts or ends with print equation layout which is suddenly no longer styled like a link (e.g., neither blue nor underlined). That&#39;s a real problem for users (and possibly failing one or more WCAG SCs). Purists will insist - and they are wrong, at the expense of users. [Fun fact: that&#39;s why I personally prefer SVG with paths instead of characters/glyphs when reproducing print equation layout on the web. It&#39;s more honest to the print content tradition and happens to avoid many of these problems with ease.]&lt;/p&gt;
&lt;p&gt;Of course there&#39;s yet another exception. In TeX for example, when you nest text mode inside math mode, that &amp;quot;inner&amp;quot; text mode can inherit. This means text in a piece of equation layout ends up, say, italic if the text surrounding the equation layout is italic (e.g., in a definition). Does this lead to confusion? You bet.&lt;/p&gt;
&lt;h3&gt;To recap&lt;/h3&gt;
&lt;p&gt;The problem of creating visual layout that matches print equation layout has been solved for well over a decade. It&#39;s somewhat ridiculous to suggest the web has a significant technology gap here that only a completely new set of markup and layout features can fix. Additionally, the theoretical structure of print equation layout enshrines problematic traditions that fit very badly, going against the web&#39;s grain.&lt;/p&gt;
&lt;p&gt;This leaves non-visual-layout considerations regarding print equation layout, in particular (web and print) accessibility considerations.&lt;/p&gt;
&lt;h2&gt;Ambiguity&lt;/h2&gt;
&lt;p&gt;Let&#39;s talk about ambiguity.&lt;/p&gt;
&lt;h3&gt;A different example&lt;/h3&gt;
&lt;p&gt;To start, consider a different example, &lt;a href=&quot;https://en.wikipedia.org/wiki/Musical_notation&quot;&gt;musical notation&lt;/a&gt;. In modern notation, a note is about as ambiguous on its own as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Grapheme&quot;&gt;grapheme&lt;/a&gt; in text. For example, without a staff and other context the note itself doesn&#39;t tell you much. You might know the value by looking at just the note but even then this might not be enough (e.g., if you happen to miss a subsequent dot or preceding accidentals). Even with a staff, you might still have trouble, e.g., if all you have is a single measure you might lack the key. Similarly for dynamics. Also, it might be part of music that ranges from Opera to Jazz and you&#39;ll want to know that to adjust your understanding.&lt;/p&gt;
&lt;p&gt;It&#39;s hard to know when you have all the relevant information. A piece may appear complete but lack information on, e.g., which instrument this is for, what other voices there might be.&lt;/p&gt;
&lt;p&gt;And this is for a fairly limited set of notational elements.&lt;/p&gt;
&lt;p&gt;Now expand this to the ever changing mathematical notation, then expand to engineering and sciences where there is no limit in generalization and specialization. [Of course, musicians can easily discuss a single note as passionately and intricately as mathematicians discuss a single number. But while this is much more interesting, it is unfortunately not the topic here.]&lt;/p&gt;
&lt;h3&gt;Some examples&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;a superscript 2 (e.g., &lt;tex-inline&gt;x^2, f^2, \sin^2&lt;/tex-inline&gt;) - is probably some sort of &amp;quot;squared&amp;quot; thingie? But is that always true? How about &lt;tex-inline&gt;A_1^2&lt;/tex-inline&gt; or &lt;tex-inline&gt;f|^2&lt;/tex-inline&gt;?&lt;/li&gt;
&lt;li&gt;a binomial coefficient cannot easily be distinguished from a 2-dim vector notation - &lt;tex-inline&gt;n \choose k&lt;/tex-inline&gt; vs &lt;tex-inline&gt;\left(\begin{smallmatrix}{} n \\ k \end{smallmatrix}\right)&lt;/tex-inline&gt;; similarly for &lt;a href=&quot;https://en.wikipedia.org/wiki/Stirling_number&quot;&gt;Stirling numbers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;frequent use of space or punctuation to imbue layout with extra meaning or to avoid having to add clarifying notation (e.g., &lt;code&gt;+a + -c + +b&lt;/code&gt; vs, say, &lt;code&gt;++b&lt;/code&gt; &lt;a href=&quot;https://whystartat.xyz/wiki/Space_is_significant&quot;&gt;https://whystartat.xyz/wiki/Space_is_significant&lt;/a&gt;)- &amp;quot;(a,b)&amp;quot; - open interval? point in the plane? bilinear form in a Hilbert space?&lt;/li&gt;
&lt;li&gt;punctuation in general. If it&#39;s in the middle, is it just a separator as in &lt;tex-inline&gt;i, j \in \mathbb{N}&lt;/tex-inline&gt; or an operator as in &lt;tex-inline&gt;1-2&lt;/tex-inline&gt; or &lt;tex-inline&gt;1.2&lt;/tex-inline&gt;? If it&#39;s at the end, is it part of the equation or actually text (a common sight in block expressions)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a]&lt;/code&gt; might be the sign of a // &lt;code&gt;[c, d]&lt;/code&gt; might be a matrix // &lt;code&gt;A[b]&lt;/code&gt; might be a ring&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|...|&lt;/code&gt; - absolute value, norm, determinant?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt; - evaluation of definite integral (alternatively &lt;code&gt;[ ... ]&lt;/code&gt; but that could also be a closed interval or a commutator)&lt;/li&gt;
&lt;li&gt;what is the difference between &lt;tex-inline&gt;\begin{array}{|c|}x \\ y\end{array}&lt;/tex-inline&gt; and &lt;tex-inline&gt;\left|\begin{array}{c}x \\ y\end{array}\right|&lt;/tex-inline&gt; and how would you find out?&lt;/li&gt;
&lt;li&gt;superscript -1. Is it an inverse? A &amp;quot;1 over something&amp;quot; ? A reverse operation? Some kind of transposition? An index for something enumerated by integers?&lt;/li&gt;
&lt;li&gt;&amp;quot;d&amp;quot; in &lt;tex-inline&gt;(a + bx^3 + cx^2 + dx = 0)&lt;/tex-inline&gt; vs &amp;quot;d&amp;quot; in &lt;tex-inline&gt;\int f(x) dx&lt;/tex-inline&gt;&lt;/li&gt;
&lt;li&gt;uppercase delta &lt;tex-inline&gt;\Delta&lt;/tex-inline&gt; and the triangle symbol &lt;tex-inline&gt;\triangle&lt;/tex-inline&gt; can look surprisingly similar depending on the font.&lt;/li&gt;
&lt;li&gt;invisible operators (U+2062, U+2061) - where to even start?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more &amp;quot;inspiration&amp;quot;, check out &lt;a href=&quot;https://whystartat.xyz/wiki/Category:Ambiguities&quot;&gt;https://whystartat.xyz/wiki/Category:Ambiguities&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An absolute favorite of mine is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Legendre_symbol&quot;&gt;Legendre symbol&lt;/a&gt; &lt;tex-inline&gt;\left({\frac {a}{p}}\right)&lt;/tex-inline&gt; which is obviously easy to confuse with a fraction that happens to have parenthesis (e.g., from reducing a more complex expression). It introduced before the year 1800 and yet, apparently, there&#39;s no dominant way to speak it, see &lt;a href=&quot;https://mathoverflow.net/questions/15447/is-there-a-standard-way-to-read-the-legendre-symbol&quot;&gt;this MO discussions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can also go the other way around. We can have the same voicing for different notations. &lt;code&gt;|A|&lt;/code&gt; and &lt;code&gt;det(A)&lt;/code&gt; may read &amp;quot;determinant of A&amp;quot;; both &lt;code&gt;exp(x)&lt;/code&gt; and&lt;code&gt;e^x&lt;/code&gt; may read as &amp;quot;exponential function at x&amp;quot;. How would a non-visual user know which notation was used when someone said this?&lt;/p&gt;
&lt;p&gt;A separate problem are the math alphabets, i.e., the abuse of using typefaces to identify different, context-dependent concepts. It seems so easy to - visually - discern italic from normal, serif from sans-serif, gothic from SÃ¼tterlin - well, in truth it is not that easy but here we are anyway. In addition, foreign alphabets are abused so much that mathematics has become reliant on particular typeface designs as mentioned earlier.&lt;/p&gt;
&lt;p&gt;For non-visual users, these then have to be differentiated (otherwise you&#39;re no better than a &amp;quot;read more&amp;quot; link) and the noise (&amp;quot;Upper Gothic X&amp;quot;)  is immense - or more often: the silence is immense.&lt;/p&gt;
&lt;p&gt;And then we haven&#39;t even opened the box of notation that&#39;s specific to engineering, physics and chemistry but realized using print equation layout.&lt;/p&gt;
&lt;h3&gt;Semantics or layout?&lt;/h3&gt;
&lt;p&gt;There&#39;s a moving goalpost (or perhaps gaslighting) issue that I&#39;ve encountered many times: should assistive technologies (AT) provide information about layout or semantics when it comes to print equation layout?&lt;/p&gt;
&lt;p&gt;A common stance in the general accessibility community is: it&#39;s not about special treatment, it&#39;s about equal treatment. What does that mean for print equation layout? Equal treatment would provide precise information about layout.&lt;/p&gt;
&lt;p&gt;But that&#39;s not what users actually expect (or are accustomed to). Instead, &amp;quot;semantics&amp;quot; are desired. Take this simple example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;f: X â Y&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Should it read&lt;/p&gt;
&lt;p&gt;&amp;quot;lower italic f colon upper italic X right arrow upper italic Y&amp;quot;&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;&amp;quot;f maps from upper X to upper Y&amp;quot;.&lt;/p&gt;
&lt;p&gt;The latter is certainly easier and happens to be how humans speak.&lt;/p&gt;
&lt;p&gt;However, print equation layout does not offer such semantic information. Therefore, solutions turn to guesswork aka &lt;a href=&quot;https://en.wikipedia.org/wiki/Heuristic&quot;&gt;heuristics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These heuristics work barely for school-level print equation layout and some, more &amp;quot;stable&amp;quot; parts of college education (e.g., engineering). But they easily and frequently fail even in these areas.&lt;/p&gt;
&lt;p&gt;To come back to our examples: yes, that superscript 2 is very likely &amp;quot;squared&amp;quot; but then again it is, inevitably, far from always &amp;quot;squared&amp;quot;. As usual, &lt;a href=&quot;https://xkcd.com/2614/&quot;&gt;xkcd has you covered on the subject of &amp;quot;2&amp;quot;&lt;/a&gt; (&lt;a href=&quot;https://creativecommons.org/licenses/by-nc/2.5/&quot;&gt;cc-by-nc 2.5&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/2.png&quot; alt=&quot;xkcd no. 2614, outlining what the number 2 might mean, depending on placement in sup/sub/pre/post/under/over scripts&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Beyond the evident lack of semantics in print layout per se, the second problem is the lack of contextual information. While MathJax and its sister project &lt;a href=&quot;https://speechruleengine.org/&quot;&gt;Speech Rule Engine&lt;/a&gt; did some Simons-funded research into the problem a few years back, no existing solution takes even other equations into account (e.g., using the guess for a variable that was used earlier).&lt;/p&gt;
&lt;p&gt;Heuristics definitely do not try to analyze the whole document context to trigger specialized heuristics despite the many obvious advantages. Just by field, you can differentiate a lot - &lt;tex-inline&gt;X\perp Y&lt;/tex-inline&gt; in statistics vs geometry, &lt;a href=&quot;https://en.wikipedia.org/wiki/Bra%E2%80%93ket_notation&quot;&gt;Bra-Ket notation&lt;/a&gt; in quantum mechanics, arrows in category theory, or (again) the Legendre symbol in number theory. Even outside subject-specific traditions, this could help, e.g., if you can identify a definition, it helps quite a bit later on. You know, like a human reader.&lt;/p&gt;
&lt;p&gt;The simplest examples can show how tricky this is. Think about &lt;code&gt;f(g+h)(x)&lt;/code&gt;. You might agree that there&#39;s a good chance that there&#39;s a function application (at x) happening but it could also just be a multiplication with x after some calculations within the parentheses, who knows. Fairly limited contextual checks can probably help out here but without them we&#39;re lost.&lt;/p&gt;
&lt;p&gt;What&#39;s worse: today&#39;s heuristics also often do not work within an equation, e.g.,&lt;/p&gt;
&lt;tex-block&gt;\operatorname{det}(A) = |A| = {\begin{vmatrix} a&amp;b \\ c&amp;d \end{vmatrix}} = ad-bc.
&lt;/tex-block&gt;&lt;p&gt;Speech Rule Engine&#39;s heuristics (the best around) will identify the middle part as a matrix determinant but still treats &lt;code&gt;|A|&lt;/code&gt; as absolute value. And in fairness, if we didn&#39;t have the first part, that A might still be some poorly named scalar.&lt;/p&gt;
&lt;p&gt;A key feature of the heuristics is surprisingly boring and complex: grouping things.  Where do subexpressions start and end? Since print equation layout is inherently non-semantic and built for author convenience, most authoring does not (have to) care about grouping the structure well. Who cares, you&#39;ll work it out visually and from context (thanks, PEMDAS!).&lt;/p&gt;
&lt;p&gt;Here&#39;s a pretty normal, real world example:&lt;/p&gt;
&lt;tex-block&gt;\begin{aligned} &amp; u_2(t,x) \\  &amp; {}= \frac{2}{t^{1/2}}. \operatorname {Re} \left( \left( \tilde{\Psi }(y) ( \log t + \log \sqrt {1-|y|^2}) +\tilde{\Phi }_2 (y) \right)\right.  \\ &amp; \quad \left. \left. \times \exp \left(it\sqrt {1-|y|^2} +i\Psi (y) \log t \right) \right)\right|_{y=\frac{x}{t+2B}}\\ &amp; \quad + O(t^{-\frac{3}{2}+c\delta }) \end{aligned}
&lt;/tex-block&gt;&lt;p&gt;Note how the parenthetical expression starting after &lt;code&gt;Re&lt;/code&gt; ends in another table row. This is perfectly understandable authoring from a print author perspective - your line is fixed and limited, you&#39;ll need to break things up. Since you&#39;re in print (and you want alignments to work), you push pieces into a table.&lt;/p&gt;
&lt;p&gt;How should heuristics work out this grouping? The answer is: probably not.&lt;/p&gt;
&lt;p&gt;Another interesting example is the treatment of horizontal and vertical space. &amp;quot;Clearly&amp;quot;, if you find &lt;code&gt;$(a \quad b)$&lt;/code&gt; and &lt;code&gt;$(a\ b)$&lt;/code&gt; near each other, they&#39;re different, right? But what can heuristics realistically do here? Especially, when they only work on a single expression? [Aside: I give the source here - SRE would indeed give the same descriptions for these expressions.]&lt;/p&gt;
&lt;p&gt;Print equation layout uses positive and negative space abundantly and often confusingly. Some authors like things spaced out where others like them tightened up. This makes it impossible to leverage space in heuristics. As a consequence, space is not to be messed with. [This also creates problems if you&#39;re mistakingly thinking print equation layout is text - because WCAG 1.4.12 would then force you to allow users to change word and letter spacing. In the end, &lt;a href=&quot;https://whystartat.xyz/wiki/Space_is_significant&quot;&gt;space is significant&lt;/a&gt;.]&lt;/p&gt;
&lt;p&gt;Similarly, one of the most important visual tools is completely absent from non-visual presentation: the size of stretchy glyphs. This is sad because the whole reason we use stretchy constructions in the first place is to make layout more accessible for users. Stretchy constructions indicate both grouping and the complexity of subexpressions. Authors frequently use it to explicitly highlight subexpressions because they realize their complexity. And yet despite their focus on layout, non-visual presentations provide no access to this information; there is no representation of stretchiness let alone the relative dimensions. The most you can hope for is something like Speech Rule Engine&#39;s ability to summarize a subexpression (along the lines of &amp;quot;a sum of 16 summands&amp;quot;). Good grouping informs users but there&#39;s a significant benefit to a stretchy character: the larger it is, the more crap is going to be inside whatever it groups - to the point where they can be downright scary. They are critical information.&lt;/p&gt;
&lt;p&gt;Frequently,  people (especially in the MathML community) promise magical semantics from print equation layout. Yet when faced with the obvious, plentiful, and unsolvable problems, the goal post is casually moved to &amp;quot;you need to give layout information&amp;quot; only so that when you provide layout information, people go back to &amp;quot;oh, that&#39;s not the idea, you should provide semantics&amp;quot;.&lt;/p&gt;
&lt;p&gt;Unfortunately, many people believe this empty promise.&lt;/p&gt;
&lt;h2&gt;Problems from print layout traditions&lt;/h2&gt;
&lt;p&gt;There are both theoretical and practical problems arising from print layout tradition.&lt;/p&gt;
&lt;h4&gt;Theoretical&lt;/h4&gt;
&lt;p&gt;Besides the fundamental issues outlined above, print equation layout has some traditions that add another layer of problems.&lt;/p&gt;
&lt;p&gt;For example, we go back to the concept of moveable limits. The expression&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\sum_{i=0}^\infty&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;would, at plain view, indicate we get &lt;code&gt;Î£&lt;/code&gt; with a subscript of &lt;code&gt;i=0&lt;/code&gt; and a superscript of &lt;code&gt;â&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, as you might recall, this depends on the mode. In inline math mode, TeX will lay this out as described. In display math mode, the sub- and superscripts will become under- and overscripts. This is, again, convenient from an authoring perspective - you can switch modes as you like, thus macros / copy&amp;amp;paste are much easier.&lt;/p&gt;
&lt;p&gt;This automatism wouldn&#39;t have to be built into a system from a purely functional/layout point of view; it&#39;s authoring convenience. Of course, MathML builds it in to be compatible with print equation layout traditions for which it was designed. In fact, it adds the (ever growing) operator dictionary to describe various layout rules like this instead of focusing on just the necessary parts of layout.&lt;/p&gt;
&lt;p&gt;This means, we have intentionally ambiguous layout instructions and that&#39;s tricky for heuristics to work - yet another context to check. [For once, that&#39;s not terribly weird for the web but media and container queries separate this much more cleanly - and they are separate from any semantic interpretation.]&lt;/p&gt;
&lt;p&gt;So what do heuristics with such ambiguous layout? They cheat to make this ambiguity go away. When voicing, simply say &amp;quot;sum from ... to&amp;quot; - tada, problem solved! Of course now you have 3 new problems: a) what if it isn&#39;t a sum? b) what if it is a sum but using a different character for the summation operator?c) what if the authors want to use side- and overscripts to mean different things?&lt;/p&gt;
&lt;h4&gt;Practical&lt;/h4&gt;
&lt;p&gt;Given the nature of print products, authors are prone to abuse layout instructions. In the end, it has to look good, who cares how they got there.&lt;/p&gt;
&lt;p&gt;For example, authors frequently make their content work purely visually, placing elements side-by-side, relying on the fixed positions of print layout.&lt;/p&gt;
&lt;p&gt;They will use table layout to split content apart so that it can fit page dimensions (e.g., complex breaks across lines), thereby making it impossible to reflow in a dynamic environment and group correctly in anon-visual semantic analysis.&lt;/p&gt;
&lt;p&gt;Reversely, they will space content out to fill a page, impeding reflow or resizing in dynamic environments.&lt;/p&gt;
&lt;p&gt;They may &amp;quot;accidentally&amp;quot; rely on TeX&#39;s defaults, e.g., consecutive display math blocks may align if those blocks are generally centered (rather than explicitly grouped by aligned blocks); yet with different alignment defaults, the alignment may fail unexpectedly. Similarly with multi-line environments or other manual and/or automatic line breaks.&lt;/p&gt;
&lt;p&gt;All of this makes it even harder for heuristics.&lt;/p&gt;
&lt;p&gt;I want to stress that these are not bad practices - many of them have long and detailed traditions (e.g., commutative diagrams). They are simply print traditions with no consideration for the web, let alone accessibility.&lt;/p&gt;
&lt;h3&gt;interlude&lt;/h3&gt;
&lt;p&gt;On the web (and in many publishing content / production pipelines), abusing HTML markup is frequently favored (i.e., text superscripts, tables, simple vertical alignments) alongside low quality (usually GIF) rendering for inline math and high-quality (usually PNG) for display content. Frequently, only the &#39;problematic&#39; parts are rendered as images leading to poor layout (e.g., tables with some equational content and a text label in lieu of properly labeled equational content, HTML scripts with graphics in either base or script position). Accordingly, content providers have a long history of &amp;quot;optimizing&amp;quot; their content for these approaches (e.g., STEM publishers have really terrible XML workflows stripping out as much complex markup as possible). That content is in some ways lost forever (because it would be cost prohibitive to re-key it).&lt;/p&gt;
&lt;h2&gt;Non-visual print equation layout&lt;/h2&gt;
&lt;p&gt;In several countries, print equation layout has some form of non-visual accessibility tradition.&lt;/p&gt;
&lt;p&gt;The US traditions are dominating in this context since MathML was developed largely by US companies for a US audience.&lt;/p&gt;
&lt;p&gt;For print traditions in the US, the most well-known methods for non-visual presentation for equation layout were developed by &lt;a href=&quot;https://en.wikipedia.org/wiki/Abraham_Nemeth&quot;&gt;Abraham Nemeth&lt;/a&gt; - nowadays known as the MathSpeak ruleset for voicing and the Nemeth Braille notation for tactile presentation. A critical point is that both sets were designed for human creation. MathSpeak, to enable a non-expert reader to read mathematical publications to blind users; Nemeth Braille for a specialist braille transcriber to transcribe (and a trained reader to read).&lt;/p&gt;
&lt;p&gt;If you can catch him, Volker Sorge (who implemented support for both as part of Speech Rule Engine and MathJax) is happy to go into much detail telling you how neither MathSpeak nor Nemeth Braille can be produced from input without extensive heuristics. The rulesets are in fact not properly specified and can be contradictory.&lt;/p&gt;
&lt;p&gt;My impression is that this is by design - these rulesets could assume a human orator/transcriber who can adjust rules on the fly to enhance the simplistic heuristics. Even without understanding mathematics, it&#39;s fairly easy to make a change on the fly, e.g., after initial feedback from the user that in this particular pattern the superscripted 2 is not &amp;quot;squared&amp;quot; but, say, a row or column vector.&lt;/p&gt;
&lt;p&gt;It&#39;s probably worth noting that Nemeth Braille has not been revised since the 1970s (though a revision has finally started a few years back). It is a specialized Braille notation that describes visual layout and only partially linearizes the output (e.g., fractions and scripts are linearized while tabular structures are not), leading to many problems as contemporary refreshable braille displays for computers are single-line devices. And of course, if you&#39;re not a Braille user, then none of it helps you.&lt;/p&gt;
&lt;h3&gt;heuristics are bad, non-recursive ones worse&lt;/h3&gt;
&lt;p&gt;At this point let me point out that heuristics are something that web accessibility eschews; heuristics are only encouraged to recover from errors (e.g., turning invalid documents into a valid ones, making sense of authoring or connection errors, dealing with legacy code like table layout).&lt;/p&gt;
&lt;p&gt;Accessibility on the web revolves around the so-called &amp;quot;accessible name&amp;quot; which is calculated for each element in the document. &lt;a href=&quot;https://w3c.github.io/accname/&quot;&gt;This calculation&lt;/a&gt; is rather complicated but at the heart of it is Step F: the accessible name of a node is accumulated from the accessible name of its children. From the end users point of view, you tend to get some additional information (such as the role of the element) added by AT. And that&#39;s about it.&lt;/p&gt;
&lt;p&gt;Print equation layout frequently does not allow for recursive naming. The heuristics necessary to guess a non-visual presentation have to frequently analyze large subtrees to make sense of things.&lt;/p&gt;
&lt;p&gt;A simple example is binomial notation, &lt;tex-inline&gt;n \choose k&lt;/tex-inline&gt;. Without the parentheses &lt;tex-inline&gt;{n \atop k}&lt;/tex-inline&gt; is not binomial notation and yet when a binomial is voiced, you wil not hear the parentheses. If you were to calculate the description recursively, you would have to decide on the description of what&#39;s within the parentheses before you get to them. How can you decide what to do at that point?&lt;/p&gt;
&lt;p&gt;To make things worse, in many print equation layout systems this notation is realized via fraction primitives by removing the fraction bar (e.g., TeX, MathML). If you were to calculate the description you now have to decide what to do with a fraction that lacks a fraction bar. Now add to this mix the Legendre symbol &lt;tex-inline&gt;\left({\frac {a}{p}}\right)&lt;/tex-inline&gt;.&lt;/p&gt;
&lt;p&gt;We can also go back to our script examples from earlier - for 2 and -1. While &lt;tex-inline&gt;7^2 = 7\times 7&lt;/tex-inline&gt; and &lt;tex-inline&gt;7^{-1} = {1 \over 7}&lt;/tex-inline&gt;, we have &lt;tex-inline&gt;\sin^2(x) = \sin x \times \sin x&lt;/tex-inline&gt; yet &lt;tex-inline&gt;\sin^{-1} x&lt;/tex-inline&gt; is actually the inverse function at x, &lt;tex-inline&gt;\arcsin x&lt;/tex-inline&gt;. If you tried to capture this, you&#39;d have to ignore whatever you&#39;re creating for superscript -1 but still know about it to interpret the other part.&lt;/p&gt;
&lt;p&gt;MathML is even worse for this, as it is a stratified format for rendering purposes. With TeX you can at least have author macros to try to make sense.&lt;/p&gt;
&lt;p&gt;Authors, especially on a research level, invent layout that requires new heuristics - both large and small. For example, they create custom glyphs (such as blackboard bold Greek characters) or they invent notations as grapheme-like tikz diagrams which then get used like any other element of a larger expression.&lt;/p&gt;
&lt;p&gt;Historically, such inventions coincide with naming. &lt;a href=&quot;https://jeff560.tripod.com/calculus.html&quot;&gt;Jeff Miller&lt;/a&gt; collects several historic examples (such as nabla). Yet, naming is not always invented alongside notation if you recall the Legendre symbol once again. [Authors also regularly just hack layout badly (e.g., &lt;code&gt;\mathop{l\overline{og}}&lt;/code&gt;) but that&#39;s technically speaking a different problem.]&lt;/p&gt;
&lt;p&gt;Authors also intentionally hack things to work around traditions. A while back at work we ran into someone apparently abusing amsmath&#39;s sideset macro in something like &lt;code&gt;\sideset{}{^*}{\sum}_{a\mid A_y}&lt;/code&gt;. We only noticed that because MathJax had improved sideset to be more accessible which changed the rendering (and introduced regressions). Upon investigation, it turned out we had a lot of similar papers. Even better, all of these authors used sideset consistently to get a superscripted sum that would still have a &amp;quot;movable&amp;quot; subscript.&lt;/p&gt;
&lt;p&gt;In other words,  authors clearly want a certain type of layout that goes against traditions; they have good reasons to do so. Heuristics trying to make sense based on those traditions suddenly break as well.&lt;/p&gt;
&lt;p&gt;This is a perfect example how traditions hold us back. They are too rigid - you can&#39;t have &amp;quot;partially moveable limits&amp;quot; without resorting to hackery. And once you have that kind of a hammer, everything looks like a nail.&lt;/p&gt;
&lt;h2&gt;MathML&lt;/h2&gt;
&lt;p&gt;MathML does not provide sufficient quality, neither in theory nor in practice.&lt;/p&gt;
&lt;h3&gt;visually&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Practically&lt;/strong&gt;: visual rendering in browsers is poor, buggy, hard to work around. It is not maintained by browser companies and never has been.&lt;/p&gt;
&lt;p&gt;Bugs range from mildly annoying to problematic to terrifyingly bizarre. I stopped noting them publicly; it&#39;s too much fun to check every few years that even basic bugs do not get fixed or even reported.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theoretically&lt;/strong&gt;: visual rendering is not actually specified (thought here is a new effort to change that, making all existing MathML renderers invalid and breaking content without care).&lt;/p&gt;
&lt;p&gt;This is where they are after 25 years of MathML, 15 years of MathML in HTML5, ~10 years of MathML &amp;quot;support&amp;quot; in Firefox, ~8 years of MathML &amp;quot;support&amp;quot; in Safari, neither of which are due to actually Mozilla or Apple spending resources but co-opted volunteer efforts. No amount of Igalia newspeak will change that fact. [Apologies to all the wonderful people I&#39;ve met from Igalia - the MathML people are not a good look for you all.]&lt;/p&gt;
&lt;p&gt;Optimistically, I&#39;d wager it will take a good decade to get reliable visual rendering quality. Certainly, CSS, SVG, HTML and ARIA will all move faster and help tools like MathJax even when they&#39;re not trying.&lt;/p&gt;
&lt;p&gt;In any case, the handful of people behind the implementations seem unable to grasp what the real life problems are so they live in their little bubble insisting that repeating &amp;quot;but it&#39;s a standard&amp;quot; does anything for users.&lt;/p&gt;
&lt;h3&gt;non-visually&lt;/h3&gt;
&lt;p&gt;MathML captures abstracted, shared concepts of print equation layout traditions. It suffers the consequences in terms of non-visual rendition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Practically&lt;/strong&gt;, MathML support is poor among screenreaders and is non-existing in&amp;quot;simpler&amp;quot; assistive technologies (with way more users) such as &amp;quot;read aloud&amp;quot; features in browsers, voice assistants etc.&lt;/p&gt;
&lt;p&gt;Only three screenreaders formally claim support and their support is limited, buggy, and of poor quality - and the pieces are minimally maintained by AT companies. Brian Richwine&#39;s talk at ATHENs documented many cases, e.g., how some ATs don&#39;t voice &amp;quot;end fraction/script&amp;quot; causing confusion (my favorite part was the anecdata form Apple support saying there&#39;s just not enough users to warrant fixes.) [Though admittedly, I have yet to see someone exhaustively testing them. Nobody is paying to test that, not even publishers who have a vested interest because the &amp;quot;experts&amp;quot; say &amp;quot;just use MathML&amp;quot;.]&lt;/p&gt;
&lt;p&gt;In addition, the user experience of what little support screenreaders provide is often questionable, e.g., JAWS will not read larger MathML fragments but just announce the presence of a math fragment; users have to then open a separate viewer application to actually read and explore the expression. [Fun fact: this is called &amp;quot;Math Viewer&amp;quot; and actually uses MathJax for visual rendering, leading to significant differences from the browser.]&lt;/p&gt;
&lt;p&gt;Similarly, VoiceOver on iOS will open pop-ups for exploration of MathML fragments, creating a separate context and confusion. NVDA needs third party plugins to do anything and has no visual component (i.e., highlighting while exploring)leaving non-blind to guess what is going on.&lt;/p&gt;
&lt;p&gt;I don&#39;t think it&#39;s enough accessibility support in the sense of &lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/conformance#accessibility-support&quot;&gt;WCAG conformance&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theoretically&lt;/strong&gt;, MathML cannot be accessible in the web&#39;s sense. Heuristics must be applied and now you (frequently) have 2 problems - your MathML must be hacked to work visually and then you might still have to hack around heuristics gone hawywire.&lt;/p&gt;
&lt;p&gt;Back when I led the W3C Math on the Web Community Group, we had fairly productive discussions even with the MathML people and we had strong consensus (with them) that MathML inevitably requires extensive heuristics to provide non-visual (voice, tactile) renditions. Nevertheless, the same people later  turned around again in wider W3C discussions, going back to the spurious claims that MathML is the only viable accessible solution.&lt;/p&gt;
&lt;p&gt;The sad part is that the W3C&#39;s TAG fell for it (and will fall for it again). My guess is because they just don&#39;t care to dig deeper - and why should they? Nobody wants to and anyone sensible will just use MathJax.&lt;/p&gt;
&lt;h3&gt;Other aspects&lt;/h3&gt;
&lt;h4&gt;localization&lt;/h4&gt;
&lt;p&gt;Another argument sometimes mentioned by MathML people is that MathML can be localized automatically. While that&#39;s true to some degree (e.g., Speech Rule Engine can create MathSpeak in a few languages), the benefit seems a questionable if the locale does not match the contextual language, say, coming to an article in Arabic and getting an equation localized in Korean. At the very least, I&#39;m unaware of research substantiating a positive effect.&lt;/p&gt;
&lt;p&gt;In practice, the available localizations in AT is quite limited and pretty undocumented. This is even worse for Braille.&lt;/p&gt;
&lt;p&gt;There are obvious obstacles for localizations. Many equations contain some text elements which would not be localized. Similarly, common terminology has different localizations/abbreviations. For example,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sine as &amp;quot;sen&amp;quot; (ES, IT) or &amp;quot;sin&amp;quot; (EN, DE)&lt;/li&gt;
&lt;li&gt;in geometry SAS/ASA/SSS (EN) vs SWS/WSW/SSS (DE)&lt;/li&gt;
&lt;li&gt;sin^-1 (EN) vs arcsin (EU) (etc)&lt;/li&gt;
&lt;li&gt;repeating decimal notation (above, below / arc vs line)&lt;/li&gt;
&lt;li&gt;open intervals as &lt;code&gt;(...)&lt;/code&gt; or  &lt;code&gt;]...[&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;any operator names the authors may introduce.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While layout-relevant terms might have suitable automatic translations (e.g., start/end fraction), layout traditions can also differ across languages (long division, matrix notation, integral notation).&lt;/p&gt;
&lt;p&gt;Nobody stops to ask: should we do this? As print equation layout is fairly meaningless without lots of context, it&#39;s difficult to imagine a reader that would read content in a language they don&#39;t understand enough to make sense of generic information like &amp;quot;begin/end fraction&amp;quot;.&lt;/p&gt;
&lt;h4&gt;The &amp;quot;Don&#39;t worry about it&amp;quot; argument&lt;/h4&gt;
&lt;p&gt;The MathML community likes to say &amp;quot;don&#39;t worry about the complicated markup, MathML is something that should be generated, not handwritten&amp;quot;&lt;/p&gt;
&lt;p&gt;This is a strange statement full of falsehoods.&lt;/p&gt;
&lt;p&gt;For example, MathML is also advertised as &amp;quot;something you can edit without understanding it&amp;quot;, e.g., while copy checking content, if an editor spots a symbol that does not match the (author) PDF, then - thanks to the structured XML markup - they can fix it without understanding.&lt;/p&gt;
&lt;p&gt;This marketing example also indicates two problems: conversion is not &amp;quot;easy&amp;quot; but riddled with errors, and having an &amp;quot;agnostic&amp;quot; markup  is actually a boon here - to any production person trying to fix a mistyped macro in TeX sources: I see you.&lt;/p&gt;
&lt;p&gt;But of course the same would be true for span soup since the markup really doesn&#39;t matter much here. Though actually, semantics tend get in the way while layout information would be useful. (Again, it makes actually sense for XML production to have a layout focus.)&lt;/p&gt;
&lt;p&gt;Similarly, as described before, MathML supports &amp;quot;moveable limits&amp;quot; (including magical dictionary-based behavior). These features show how important it was for the MathML community to be compatible with authoring traditions instead of focusing on the &amp;quot;pure&amp;quot; layout. If you generate it anyway, why not make it precise and avoid this?&lt;/p&gt;
&lt;p&gt;Finally, this line of argument is self-defeating. If the whole point is to convert from some kind of &amp;quot;real source&amp;quot; to MathML, then it&#39;s just as natural to convert from that &amp;quot;real source&amp;quot; to HTML or SVG.&lt;/p&gt;
&lt;p&gt;Why have an extra markup system that requires an extra rendering process when you can just use what&#39;s already much better supported?&lt;/p&gt;
&lt;h4&gt;Limited support for MathML&lt;/h4&gt;
&lt;p&gt;Among screenreader, only Apple VoiceOver and Vispero&#39;s JAWS claim to support for MathML. In reality, the implementations are full of bugs and gaps. Bug reports are rarely responded to, far less fixed. Apple has essentially communicated &amp;quot;it is what it is&amp;quot;.&lt;/p&gt;
&lt;p&gt;Nemeth Braille support has relied on the liblouis library - which recently discontinued its support of it; liblouis only ever converted MathML to the Nemeth/UEB and German/Dutch/Flamish families braille notations - and it did so quite poorly. [No, the new &amp;quot;cat&amp;quot; on the block doesn&#39;t count either. Old wine, new bottles, just as rusty.]&lt;/p&gt;
&lt;p&gt;More importantly, no &amp;quot;light&amp;quot; assistive technology supports MathML,e.g., &amp;quot;read aloud&amp;quot; features in smaller assistive helpers, in epub reading applications or in voice assistants (Siri et al, e.g., when reading out web content). This lack of support impacts the largest portion of users, since these tools are much more widely used than the more advanced, full-fledged screenreaders like VoiceOver, JAWS, and NVDA.&lt;/p&gt;
&lt;h2&gt;What do we do to address this inherent lack of accessibility?&lt;/h2&gt;
&lt;p&gt;Print equation layout is inherently not accessible in the sense of the web. MathML is a red herring as it (at most) aims to reproduce accessibility traditions from the print era but inherently cannot reproduce it well since those traditions relied on human operators(orators or transcribers). It also only works for English and, it seems, really only for Nemeth users.&lt;/p&gt;
&lt;p&gt;I approach such problems by looking for guidance regarding the web in general. &lt;a href=&quot;https://frankchimero.com/blog/2015/the-webs-grain/&quot;&gt;The web&#39;s grain&lt;/a&gt;, if you like.&lt;/p&gt;
&lt;h3&gt;The web&#39;s core principles&lt;/h3&gt;
&lt;p&gt;&amp;quot;Users before author before implementors before theory&amp;quot;&lt;/p&gt;
&lt;p&gt;From the &lt;a href=&quot;https://www.w3.org/TR/design-principles/#priority-of-constituencies&quot;&gt;W3C design principles&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;User needs come before the needs of web page authors, which come before the needs of user agent implementors, which come before the needs of specification writers, which come before theoretical purity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;What do users want from print equation layout? And what do they actually need?&lt;/h3&gt;
&lt;p&gt;We simply don&#39;t know.&lt;/p&gt;
&lt;p&gt;Yes, most countries do &lt;em&gt;something&lt;/em&gt; at the school level. But actual research is barely existent; what little there is, is usually limited to small groups and all the biases of simplistic educational studies.&lt;/p&gt;
&lt;p&gt;My impression has been that there are too few AT users among the mathematical community - support is so poor, few make it to college let alone research-level. Accordingly, few have both the skills and the luxury to think freely about the problem. (T.V. Raman is one of the few exceptions and I&#39;m still grateful he gave Davide and me the opportunity to work with the ChromeVox team for a bit - and to meet Volker Sorge who was on sabbatical at Google Research back then.)&lt;/p&gt;
&lt;p&gt;Anecdotally, the most consistent feedback I&#39;ve seen in educational studies comes down to &amp;quot;I want it to be read like my teacher/prof reads it in class&amp;quot;. That sounds an awful lot like users want to have what authors want to say, and matches the core principles pretty well. It&#39;s one of those &amp;quot;did you need a study for that?&amp;quot; moments (yes, we do) and yet it shows how flawed the current approaches are. Yes, it&#39;s a common paradigm that authors should enable AT users to customize their output. But if you take away the author&#39;s ability to express themselves, are you really helping users?&lt;/p&gt;
&lt;p&gt;Assuming I&#39;m wrong in my assessment for lower level equation layout: for mathematically heavy research material? There&#39;s absolutely nothing to base an opinion on.&lt;/p&gt;
&lt;p&gt;Those users probably want TeX annotations because research-level users very likely know TeX syntax. But is that what they &lt;strong&gt;need&lt;/strong&gt;, e.g., when exploring a complex expression? [Fun fact, some European communities favor presenting TeX strings in Braille - starting from first grade.]&lt;/p&gt;
&lt;h3&gt;interlude&lt;/h3&gt;
&lt;p&gt;This discussion is usually skewed by two major factors: US users and blind users. As with most of the web, the US dominance has led to people ignoring other factors. If it works for US users, it&#39;s fine, amiright. So the limited MathSpeak and Nemeth implementations in MathPlayer were enough to woo the US blind community and its influence wooed the rest.&lt;/p&gt;
&lt;p&gt;To take an example. Blind users (especially students) need to write assessments using the tools their classes require. If they need to use MS Word, they&#39;ll need something to paste into Word. MathML was originally conceived as just such an exchange format for print equation layout - abstracting the minimal common ground so that each engine could reasonably present it.&lt;/p&gt;
&lt;p&gt;However, the authoring problem requires conversion. This easily goes haywire. For example, Libre office&#39;s &amp;quot;Math editor&amp;quot; digests MathML but converts it into its own linearized (~Asciimath like) syntax. And while it includes MathML in its file, that MathML will be generated from the linearized format. This is a process full of bugs.&lt;/p&gt;
&lt;p&gt;MS Word does the same thing but has a custom XML format for print equation layout. Same approach, same problems. It doesn&#39;t help to add more formats (such as TeX-like input).&lt;/p&gt;
&lt;p&gt;MathML-based wysiwyg editors exacerbate the problem (as wysiwyg is wont to do) since they cannot easily discern logical structure of input // do not make it apparent to users that they&#39;re doing something really terrible (e.g., inserting random whitespace, flip-flopping font choices).&lt;/p&gt;
&lt;p&gt;However, if you are a blind user who knows Nemeth well, then that conversion process might just work sufficiently well for you because things were designed just for this use case. Ergo, you will say it&#39;s great and your influential community will prevent any discussion about whether this is actually a good trade off for other user needs.&lt;/p&gt;
&lt;p&gt;At ATHENs earlier this year, all speakers I heard included at least one statement along the lines of: &amp;quot;our successful students are those who know Nemeth&amp;quot;. Clearly, it&#39;s good that Nemeth helps students succeed but in the words of a spaceship captain: &amp;quot;Not good enough, dammit, not good enough&amp;quot;.&lt;/p&gt;
&lt;p&gt;The reality of all users is: the web is fairly bad at being copy&amp;amp;pasted elsewhere. And that&#39;s an interesting, complex, and very broad problem. I&#39;d love to see more movement in this direction but I don&#39;t think it makes sense to make copy&amp;amp;paste to MS Word a requirement for realizing print equation layout on the web when nothing else on the web can do this. (Pasting SVG into Word anyone?)&lt;/p&gt;
&lt;p&gt;[Repeated conversion tends to be lossy. From my limited yet painful experience of editing conversion results, I doubt it will be great if you went back and forth across print equation systems for a bit; if I cared enough, I&#39;d test that hypothesis.]&lt;/p&gt;
&lt;p&gt;Ultimately, Braille is a print technology, and  in the context of a refreshable display there isn&#39;t even a page, let alone a multidimensional presentation that a dynamic webpage can provide. Again, this is a broad and interesting problem, again print equation layout is not a great case for special treatment.&lt;/p&gt;
&lt;p&gt;Similarly, Unicode math alphabets are a print technology. It makes sense in a print context to separate out codepoints that have very special fontface requirements. They work fairly terribly in terms of non-visual rendering. &lt;a href=&quot;https://mathstodon.xyz/@pkra/108231823892676435&quot;&gt;For example, I once tested&lt;/a&gt; the string &lt;code&gt;Ï(x)=âââ¿ xáµ&lt;/code&gt; and it came out as &amp;quot;open paren x close paren equals n-ary summation n x&amp;quot; (JAWS) or &amp;quot;x equals n-ary summation superscript n x&amp;quot; (NVDA) and &amp;quot;phi x equals to the power of n x&amp;quot; (Chrome speech synthesis). Yay us. Now you might argue that in the right markup, voicing could be different, e.g., automatically more verbose. And that&#39;s an excellent point - but I would couner that math alphabets are far from the only Unicode characters with these kinds of problems - emoji for one are even more prevalent than math alphabets to fill account names or social media postings - and a better solution would be a general one, not &amp;quot;math markup&amp;quot;.&lt;/p&gt;
&lt;p&gt;Another quirk of the accessibility traditions around print equation layout is what layout information is exposed. Font variants, upper/lower, under/overlines are all exposed - yet color is not. Why? Likely because print traditionally doesn&#39;t use (a lot of) color out of the pure necessity that color print is not readily available. But that is not stopping authors; color is a useful and beautiful tool. Of course, it&#39;s &amp;quot;obvious&amp;quot; that non-visual media won&#39;t present color well but neither will it present different typefaces well - and somehow that was ok with everyone. This is particularly strange, when you find dedicated syntax for &amp;quot;mathcolor&amp;quot; with no effect.&lt;/p&gt;
&lt;h3&gt;What to want for authors&lt;/h3&gt;
&lt;p&gt;I want to give authors the ability to express themselves well.&lt;/p&gt;
&lt;p&gt;And authors &lt;strong&gt;want&lt;/strong&gt; to do that.&lt;/p&gt;
&lt;p&gt;Just look at any &amp;quot;list of symbols&amp;quot; in a monograph, e.g., from &lt;a href=&quot;https://bookstore.ams.org/gsm-210/&quot;&gt;this combinatorics book&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.peterkrautzberger.org/assets/2022/gsm210-notation.png&quot; alt=&quot;a screencapture from a list of notations with short definitions&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Despite using very ambiguous terms, the authors clearly have a strong intententions.&lt;/p&gt;
&lt;p&gt;I want authors to bring their intententions into the process.&lt;/p&gt;
&lt;p&gt;We can (barely) do that with Speech Rule Engine. We cannot do that with MathML.&lt;/p&gt;
&lt;h3&gt;What do you want for your users?&lt;/h3&gt;
&lt;p&gt;I want to take responsibility for my content.&lt;/p&gt;
&lt;p&gt;I want to provide high-quality consistent, robust rendering for all users.&lt;/p&gt;
&lt;p&gt;I want to provide visual layout that is robust against font issues (especially onepub).&lt;/p&gt;
&lt;p&gt;I want to provide speech and braille alternatives.&lt;/p&gt;
&lt;p&gt;I want to provide consistent, reliable, robust exploration.&lt;/p&gt;
&lt;p&gt;I want to be able to fix issues.&lt;/p&gt;
&lt;p&gt;I want to be able to provide additional features (e.g., convenient access to TeX sources, customization options).&lt;/p&gt;
&lt;h3&gt;What do you do?&lt;/h3&gt;
&lt;p&gt;I usually provide high-quality visual rendering using MathJax&#39;s SVG output, alongside the high-quality heuristics in Speech Rule Engine to generate non-visual rendering.&lt;/p&gt;
&lt;p&gt;I also generate fully explorable layout and descriptions that are the same for everyone everywhere. They are robust enhancements with solid fallbacks. If there is a problem, it is my fault, not the user&#39;s. And if need be I can fix it in post.&lt;/p&gt;
&lt;p&gt;I tend to use the MathSpeak ruleset for descriptions meant for voicing because MathSpeak doesn&#39;t attempt to be as &amp;quot;smart&amp;quot; as other available heuristics (which target school level mathematics).&lt;/p&gt;
&lt;p&gt;I use Nemeth Braille because content is primarily in English. Arguably, Speech Rule Engine doesn&#39;t have any support for other Braille output so I accept that I need to use Nemeth for other languages. I&#39;m not beyond using TeX as quick alt text. If I want more, I&#39;ll try to help Speech Rule Engine get funding.&lt;/p&gt;
&lt;p&gt;I make sure that speech descriptions work with all tools - from full-fledged screenreaders and simple read-aloud tools. If there are issues (e.g., a recent VoiceOver on iOS regression I ran into), I can work around it.&lt;/p&gt;
&lt;p&gt;Yes, the ARIA technique for exposing Braille alongside speech-optimized text is cutting edge and not widely supported yet. But they went from editor&#39;s draft to full browser support in 2 years and they help much more than just print equation layout.&lt;/p&gt;
&lt;p&gt;I often embed TeX sources that automatically copy&amp;amp;paste when you select things; it&#39;s a nice bit of magic under my control.&lt;/p&gt;
&lt;p&gt;I set things up so as to allow for additional options to expose various formats (e.g., populating everything with TeX or loading full-on client-side MathJax).&lt;/p&gt;
&lt;p&gt;I do so with intent and knowledge of the problem space, the capabilities of the solution I built and the flexibility to help users.&lt;/p&gt;
&lt;h3&gt;interlude&lt;/h3&gt;
&lt;p&gt;Some good old whataboutism:&lt;/p&gt;
&lt;p&gt;What about electrical engineering diagrams? Same garbage print stuff but at least nobody pretends to cook up markup. Take diodes - &lt;a href=&quot;https://www.electrical-symbols.com/electric-electronic-symbols/diode-symbols.htm&quot;&gt;their symbols&lt;/a&gt; for their types are basically letter like. Shouldn&#39;t we have those in Unicode?&lt;/p&gt;
&lt;p&gt;What about chemical markup? ChemML is another wonderful XML abomination.&lt;/p&gt;
&lt;p&gt;What about, again, music notation?&lt;/p&gt;
&lt;p&gt;Should all of these be first class citizens on the web, with separate rendering systems to adhere to their particular (print) histories?&lt;/p&gt;
&lt;h2&gt;Tangents&lt;/h2&gt;
&lt;h3&gt;copy &amp;amp; paste&lt;/h3&gt;
&lt;p&gt;The MathML community will frequently point out how &amp;quot;easy&amp;quot; it supposedly is to copy&amp;amp;paste MathML around.&lt;/p&gt;
&lt;p&gt;The reality is that extremely few applications accept MathML, it&#39;s a cumbersome process, and MathML is dropped in the end, converted to whatever internal format is used by the target application.&lt;/p&gt;
&lt;p&gt;The primary reason why this myth holds is that MS Word digests MathML. However nowadays, MS Word also accepts (reasonable math mode) TeX when pasting into &amp;quot;equation fields&amp;quot; which shows both the limited usefulness of MathML as well as the pervasiveness of (math mode) TeX. And of course Word uses its custom markup syntax internally (and its home-grown technology for braille and voice rendering instead of whatever ATs provide).&lt;/p&gt;
&lt;p&gt;More importantly, while copy&amp;amp;paste is a worthwhile challenge, it is also a general challenge with web content. Copy&amp;amp;pasting website content into any kind of text editor (word processor, email application, TeX sources) is very poorly supported in general. While headings might survive, even something as simple as a list can break, tables usually break and &amp;quot;true&amp;quot;web design (e.g., CSS grids) does not survive. Even (inline) SVG content is not supported widely (despite being a well-supported, self-contained graphics format).&lt;/p&gt;
&lt;p&gt;This is not at all surprising given how most of the targets are meant to create print layout - and struggle with web layout. Why then should equation layout on the web be less complicated than the rest? Instead of insisting on broken technology (like print equation layout and specifically MathML), it would be better to think about the more general problem that affects everyone. We have to anyway and a niche solution does not move us forward (yes, HTML v3 did have it wrong).&lt;/p&gt;
&lt;h3&gt;authoring and recreating&lt;/h3&gt;
&lt;p&gt;Related to copy&amp;amp;paste is the area of authoring and recreating print equation layout.&lt;/p&gt;
&lt;p&gt;Let&#39;s go back to the example of matrix determinants. Both &lt;code&gt;det(A)&lt;/code&gt; vs&lt;code&gt;|A|&lt;/code&gt; would be voiced as &amp;quot;determinant of A&amp;quot; yet their authoring is quite different.&lt;/p&gt;
&lt;p&gt;Sometimes, readers have to (re)create content to match someone else&#39;s example (e.g., in any educational setting). Again, this is a general problem (color vs colour). For text, AT usually provides character-by-character navigation (incidentally, I&#39;m not sure about graphemes more generally). For print equation layout this is naturally trickier: on the one hand, we come back to the idea to &amp;quot;just&amp;quot; give layout information, on the other hand layout may be insufficient (e.g., table-like).&lt;/p&gt;
&lt;h3&gt;Voice input/output&lt;/h3&gt;
&lt;p&gt;Voice input is becoming an important aspect of how users interact with web content, both using AT (e.g., in combination with Dragon NaturallySpeaking) as well as using general purpose tools such as smart assistants (Siri, Alexa etc).&lt;/p&gt;
&lt;p&gt;Despite funded efforts, there has been not even light progress for enabling print equation layout by voice input.&lt;/p&gt;
&lt;h3&gt;Audio and Video Captioning&lt;/h3&gt;
&lt;p&gt;Providing accessible audio and video media requires captions, in particular transcripts, subtitles, and audio descriptions. For content rich with print equation layout, automatic conversion requires voice recognition, image analysis, and conversion to speech (e.g., a mathematical lecture with equations on a blackboard that the speaker discusses). Since the standard formats (e.g., for subtitle functionality in a video player) require plain text, MathML is of no use here even if it were an adequate fit for how people speak. In addition, there are no tools nor traditions around &amp;quot;speaking equation layout&amp;quot; in such settings.&lt;/p&gt;
&lt;p&gt;Reversely, there&#39;s audification. Take &lt;a href=&quot;https://play.google.com/books/publish/autonarrated/&quot;&gt;Google&#39;s AI-driven audio book narration&lt;/a&gt;. I doubt it&#39;ll do print equation layout anytime soon (by which I mean: ever).&lt;/p&gt;
&lt;h3&gt;Search&lt;/h3&gt;
&lt;p&gt;Despite decades of research, search around MathML has never provided tangible benefits despite clear user needs to discover existing results both to avoid and identify duplicate research. This is true for all of the ever expanding STEM fields.&lt;/p&gt;
&lt;p&gt;Springer&#39;s discontinued LaTeX search or zbmath&#39;s MathML based system are good examples of this failure. A sizeable research corpus revolves around analyzing MathML fragments, yet no actually useful system is available.&lt;/p&gt;
&lt;h3&gt;Progress&lt;/h3&gt;
&lt;p&gt;Here&#39;s a very personal opinion: the MathML people have actively worked against progress for equation layout on the web, and STEM content as a larger issue.&lt;/p&gt;
&lt;p&gt;Why do I say this? Because anyone who has followed this area as closely as I have in the past decade or so (which, alas, is barely a handful of people) know that it&#39;s the MathML people who insist that MathML must be implemented at all costs, actively damaging other approaches, even approaches with better results for users.&lt;/p&gt;
&lt;p&gt;To the purists, MathML is more important than users, authors, and browsers.&lt;/p&gt;
&lt;p&gt;As a result, projects that made actual progress (like MathJax, mathlive, hell - even KaTeX) are in danger of losing support from their communities because people are being told &amp;quot;you must use MathML&amp;quot;. [Don&#39;t get me wrong, I can gripe about these projects, too, but at least they move.]&lt;/p&gt;
&lt;p&gt;All the while, there&#39;s no indication that MathML development will speedup at all, even if Chrome ships the new, cut-down, incompatible spec.&lt;/p&gt;
&lt;p&gt;So if you ever again complain about the lack of improvements in this space, blame the MathML people. They are to blame. We could have made many small improvements to the platform that would have benefited everyone if the MathML people hadn&#39;t killed everything that didn&#39;t suit them and drove away anyone who didn&#39;t agree with them.&lt;/p&gt;
&lt;p&gt;Reversely, MathML is being held back where it actually shines - XML print production. There&#39;s so much useful print equation content to consider for XML workflows (tikz alone!); extending MathML would be natural here. Instead, even the XML people get nothing (or worse - a cut down spec they can&#39;t use until JATS adopts it).&lt;/p&gt;
&lt;p&gt;I wrote earlier that &amp;quot;web equation layout&amp;quot; is not something that exists. So you might say, what&#39;s the problem? I think the problem is that we might get stuck, in a bad way. Here&#39;s quote from &lt;a href=&quot;https://arxiv.org/pdf/1511.08033v1.pdf&quot;&gt;On Mathematical Symbols in China&lt;/a&gt; (again, thanks to Christian&#39;s &lt;a href=&quot;https://read.somethingorotherwhatever.com/entry/OnMathematicalSymbolsinChina&quot;&gt;Interesting Esoterica&lt;/a&gt;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ancient Europeans struggled with fractions because of the use of&lt;br /&gt;
tedious Roman numerals, so ancient Europeans were weakest in algebra.&lt;br /&gt;
However, when Indian-Arabic numerals were introduced into Europe, four&lt;br /&gt;
operations in Europe were simplified. [... As] a result, algebra developed rapidly. Similarly, China&#39;s ancient mathematics failed to form a perfect symbol system and were stagnant because of the limits of the counting rod, resulting in not only a lack of the axiomatic system, but also the absence of symbolic algebra, analytic geometry, calculus and modern variable mathematics in China. Naturally, to move forward it was necessary to break barriers and to get in touch with international standards and to forward to symbolic mathematics. This shows that the extension and development of any prosperous culture cannot be confined to the boundaries of that nation, and it is hard to create a complete and rich symbol system independently and separately from the influence of other nations and the outside world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think the web should not be confined to print equation layout. We should not want to get stuck replicating a limited medium in a much more versatile one.&lt;/p&gt;
&lt;p&gt;MathML is the zombie of web standards. Each decade brought 1 additional, differently broken implementation (first Firefox, then Safari, soon Chrome). The new spec for Chrome will render a lot of existing content unexpectedly or not at all, but it will be the author&#39;s fault - how clever of them. XML people will have even more &amp;quot;fun&amp;quot; getting their content to work on the web. (Or, more likely, just continue to use MathJax which just keeps getting better instead of worse.)&lt;/p&gt;
&lt;p&gt;Bugs in those three disjoint implementations are, of course, aplenty; I find a new one every time something forces me to look at native MathML implementations, some are ridiculously bad (wiping out HTML content is one of my favorites) and most bugs go for years without bugs even being filed (remember when Safari didn&#39;t draw fraction lines reliably for over a year? No, you don&#39;t because you don&#39;t use it and nobody even filed a bug).&lt;/p&gt;
&lt;p&gt;For the web, the best case scenario is: nobody cares and nobody uses it. It will become the new font/center/marquee or whatever.&lt;/p&gt;
&lt;p&gt;Even if the MathML people were interested in moving the layout facilities into CSS, we&#39;ll get, at best, something like CSS tables. If you don&#39;t know the &amp;quot;joy&amp;quot; of working with CSS tables: to this day they are not able to suitably realize HTML table layout, they were super buggy for the longest time and are still buggy in many edge cases (despite years of active improvements). But  most of all: people realized they actually needed something completely different, i.e., CSS grid, flexbox, and container queries.&lt;/p&gt;
&lt;p&gt;Accessibility wise, the shoddy implementations in JAWS and VoiceOver will continue to barely help English speaking blind users. Soiffer will try to push his weird MathPlayer clone into every AT so that he can continue to claim patently false things. No &amp;quot;intent&amp;quot; in the world will make print equation layout accessible in the sense of the web. Nemeth users might eventually get what they want - the rest? Not so much.&lt;/p&gt;
&lt;p&gt;In other words, users will continue to find themselves out of luck. But hey, &amp;quot;it&#39;s a standard&amp;quot;. They made you beg for it, then they begged you for money (instead of Apple and Google); now you have something you don&#39;t want, something that doesn&#39;t work and something that cannot work. It&#39;s what you wanted, a &amp;quot;standard&amp;quot;.&lt;/p&gt;
&lt;p&gt;I think MathML (this of course means: its community) is fundamentally not willing and not able to be a positive force. It&#39;s &amp;quot;MathML or die&amp;quot; all the way. The zombie standard continues its shambling walk.&lt;/p&gt;
&lt;h2&gt;interlude&lt;/h2&gt;
&lt;p&gt;The future will be different from what you expect. The other day/month/year, our oldest started learning the piano. Of course, this means learning musical notation; it&#39;s one of the benefits, I&#39;d say. But it&#39;s (inevitably) hard to motivate.&lt;/p&gt;
&lt;p&gt;So being a stupid internet person, I searched around for fun apps that teach the piano. I found apps that, shockingly, didn&#39;t really use traditional musical notation. Instead, they had some barebones resemblance (I&#39;m guessing to enable later learning) but they took things in another direction by leveraging the medium, i.e., modern mobile applications.&lt;/p&gt;
&lt;p&gt;These apps would listen via microphone, give immediate feedback on correctness in a range of properties (dynamically increasing tolerance for errors). They would use their infinite canvas to provide just-in-time context in large visuals to keep silly younglings focused and unconcerned about length. They would play along simple training material providing more complex arrangements so that even an early learner would not be facing dull pieces of repetitive notes. They would immediately get you to jump into contemporary pop songs, sync highlighting along the way, bringing enormous satisfaction. They were just generally being impressively awesome. None of it with traditional musical print notation.&lt;/p&gt;
&lt;h2&gt;Quo vadis?&lt;/h2&gt;
&lt;p&gt;So where do we go from here?&lt;/p&gt;
&lt;p&gt;I&#39;m not saying you shouldn&#39;t put print equation layout on the web. I do it for a living; knock yourself out.&lt;/p&gt;
&lt;p&gt;I am saying that you should consider two things when you do.&lt;/p&gt;
&lt;h3&gt;even mildly complex print equation layout is simply a bad type of content.&lt;/h3&gt;
&lt;p&gt;Find better ways, communicate better. You don&#39;t need to go all &amp;quot;Kill math&amp;quot; about it. But for crying out loud experiment, be creative. Or at the very least copy creative people.&lt;/p&gt;
&lt;p&gt;There are soooo many good people out there experimenting -- just check math teachers on twitter and you&#39;ll find wondersome and wonderful experimentation - shout out to &lt;a href=&quot;https://www.visualpatterns.org/&quot;&gt;Fawn&#39;s visual patterns&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Think about responsive arrangements of your equation layout. Think about animations of equation content. Think about mixing imagery with complex text content and only a touch of equation layout. Think about scrollytelling techniques. Think about using something else instead. And fail! Fail again! Fail well! Fail at failing until you fail to fail.&lt;/p&gt;
&lt;p&gt;The web is a wonderous medium. Its grain is fantastic to work with, read its direction, feel it out, mess with it.&lt;/p&gt;
&lt;h3&gt;story telling&lt;/h3&gt;
&lt;p&gt;Way back when I disliked &lt;a href=&quot;http://worrydream.com/KillMath/&quot;&gt;Bret Victor&#39;s Kill math&lt;/a&gt; for actively ignoring the power of compression of equation layout.&lt;br /&gt;
But nowadays I don&#39;t like it for its lack of imagination regarding the presentation of equation layout. It just gives up and uses a completely different medium. Before you ask, I didn&#39;t like the &lt;a href=&quot;http://worrydream.com/ScrubbingCalculator/&quot;&gt;scrubbing calculator&lt;/a&gt; that much either - even when you ignore that it&#39;s not accesible. But at least the idea Explorable Explanations inspired &lt;a href=&quot;https://explorabl.es/&quot;&gt;more&lt;/a&gt; &lt;a href=&quot;https://landgreen.github.io/physics/&quot;&gt;people&lt;/a&gt;. I readily admit I might be jaded and just can&#39;t find anything good in mathematical examples while I enjoy lovely examples like &lt;a href=&quot;https://halftone.co/projects/why-is-the-sky-blue/&quot;&gt;why is the sky blue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Apps like &lt;a href=&quot;https://soulver.app/&quot;&gt;soulver&lt;/a&gt; showed a while ago how some kinds of complex equation layout might become unnecessary. &lt;a href=&quot;https://www.tandisgame.com/&quot;&gt;Tandis&lt;/a&gt; is mesmerizing and I suspect accessibility questions around these could teach us an awful lot more than any MathSpeak/Nemeth debate.&lt;/p&gt;
&lt;p&gt;Where are the animated equations? What would that even look like?&lt;br /&gt;
Where are the scrollytelling explanations of deep concepts in new ways?&lt;br /&gt;
Where are at least typesetting animations for equation layout?&lt;br /&gt;
Why capture a complex diagram statically when you can send something that dynamically or interactively draws it?&lt;/p&gt;
&lt;h3&gt;if you do it, do it accessibly and that means do accessibility yourself&lt;/h3&gt;
&lt;p&gt;If you put print equation layout on the web, be aware that you&#39;re bringing inaccessible content to the web. I&#39;m happy to point anyone to WCAG 1.1.1 because every print equation layout tradition clearly separates its use from text. TeX literally separates &amp;quot;math mode&amp;quot; from &amp;quot;text mode&amp;quot; - you can&#39;t be much clearer. Other systems do the same thing: in MS Word and similar tools, the equation editing will be found in an entirely separate UI area from text editing. The two are disjoint. Call me non-intuitionistic but &amp;quot;not text&amp;quot; is &amp;quot;non-text&amp;quot;.&lt;/p&gt;
&lt;p&gt;Essentially, you&#39;re putting up a structured image. SVG is the best mental model here: if you generate a diagram with mermaidjs, you could use some of your input to enable accessibility. But you probably have to do a whole lot more.&lt;/p&gt;
&lt;p&gt;You don&#39;t have to do everything yourself. Speech Rule Engine provides you the best heuristics on the market and &lt;a href=&quot;https://www.peterkrautzberger.org/0215&quot;&gt;a direct way to bring your own&lt;/a&gt; - whether you bring a plain label (that still offers SRE&#39;s heuristics and layout information) or you write your own heuristics, it&#39;s there to build upon.&lt;/p&gt;
&lt;p&gt;Above all: be mindful what you want to do. If you want to provide TeX as non-visual presentation, do that; you are the author and it&#39;s your prerogative. Just tell users and be open to criticism.&lt;/p&gt;
&lt;p&gt;If you want to provide more standardized descriptions, use Speech Rule Engine to generate them. You can provide braille-specific descriptions alongside speech-oriented ones. MathJax and SRE are the best there is for that kind of thing. If you don&#39;t use JS on the client, you can still do things server-side. If equation layout gets complex, use an ARIA tree or tree grid with a modicum of client-side JS (check &lt;a href=&quot;https://github.com/pkra/peterkrautzberger.org/&quot;&gt;this site&#39;s source&lt;/a&gt; to see one way of doing that); several ideas are being discussed in the standards world which might make exploration work without client-side JS in the future.&lt;/p&gt;
&lt;p&gt;If any of that sounds interesting but you don&#39;t know where to go next, feel free to get in touch, I&#39;d love to help.&lt;/p&gt;
&lt;h2&gt;The end&lt;/h2&gt;
&lt;p&gt;You&#39;ve made it this far. Incredible! Time to move on. Here, read &lt;a href=&quot;http://hackeducation.com/2022/03/08/hope&quot;&gt;this transcript of a talk by the wonderful Audrey Watters&lt;/a&gt; about hope. I wished I could write as well as her but alas.&lt;/p&gt;
</content>
	</entry>
</feed>
